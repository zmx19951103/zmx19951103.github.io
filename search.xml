<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>最近公共祖先</title>
      <link href="/2019/12/24/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
      <url>/2019/12/24/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>dijkstra复习</title>
      <link href="/2019/12/24/dijkstra%E5%A4%8D%E4%B9%A0/"/>
      <url>/2019/12/24/dijkstra%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/shortest-path-with-alternating-colors/" target="_blank" rel="noopener">1129. 颜色交替的最短路径</a></p><p>代码:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; shortestAlternatingPaths(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; red_edges, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; blue_edges) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; graph(n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n,<span class="number">0x3f3f3f3f</span>));</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; color(n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n,<span class="number">-1</span>)); <span class="comment">// </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; e: red_edges)&#123; graph[e[<span class="number">0</span>]][e[<span class="number">1</span>]] = <span class="number">1</span>; color[e[<span class="number">0</span>]][e[<span class="number">1</span>]] = <span class="number">0</span>;&#125; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; e: blue_edges)&#123; graph[e[<span class="number">0</span>]][e[<span class="number">1</span>]] = <span class="number">1</span>; <span class="keyword">if</span>(color[e[<span class="number">0</span>]][e[<span class="number">1</span>]]==<span class="number">0</span>)color[e[<span class="number">0</span>]][e[<span class="number">1</span>]] = <span class="number">2</span>; <span class="keyword">else</span> color[e[<span class="number">0</span>]][e[<span class="number">1</span>]] = <span class="number">1</span>;  &#125; <span class="comment">// 一个方向的边可能既有蓝色又有红色</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// read , blue</span></span><br><span class="line">        <span class="comment">// vector&lt;int&gt; res(n,-1);</span></span><br><span class="line">        <span class="comment">// 选择路径的时候加上边的颜色的限制</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; min_len(<span class="number">2</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n,<span class="number">0x3f3f3f3f</span>));</span><br><span class="line"></span><br><span class="line">        min_len[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        min_len[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; used(<span class="number">2</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n,<span class="number">0</span>)); <span class="comment">// 0 means not used,1 means used</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">// vector&lt;int&gt; last_col(n,-1) ; // -1 means start , 0 means red , 1 means blue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">/////////</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">2</span>*n;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">while</span>(p--)&#123; </span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> red_chosen;</span><br><span class="line">            <span class="keyword">int</span> blue_chosen;</span><br><span class="line">            <span class="keyword">int</span> red_max_ = <span class="number">0x3f3f3f3f</span>; <span class="comment">// infinite</span></span><br><span class="line">            <span class="keyword">int</span> blue_max_ = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; n; i++ ) &#123;</span><br><span class="line">            </span><br><span class="line">                <span class="keyword">if</span>(!used[<span class="number">0</span>][i]&amp;&amp; min_len[<span class="number">0</span>][i]&lt;red_max_ ) &#123; red_max_ = min_len[<span class="number">0</span>][i]; red_chosen= i;&#125;</span><br><span class="line">                  <span class="keyword">if</span>(!used[<span class="number">1</span>][i]&amp;&amp; min_len[<span class="number">1</span>][i]&lt;blue_max_ ) &#123; blue_max_ = min_len[<span class="number">1</span>][i]; blue_chosen= i;&#125;  </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(red_max_==<span class="number">0x3f3f3f3f</span> &amp;&amp; blue_max_==<span class="number">0x3f3f3f3f</span>) <span class="keyword">break</span>;</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span>(red_max_!=<span class="number">0x3f3f3f3f</span>)&#123;</span><br><span class="line"></span><br><span class="line">               used[<span class="number">0</span>][red_chosen] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123; <span class="comment">// 更新路径距离</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(!used[<span class="number">1</span>][i] &amp;&amp; color[red_chosen][i] != <span class="number">0</span> ) &#123; <span class="comment">// 1 or 2 </span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(min_len[<span class="number">1</span>][i]&gt; min_len[<span class="number">0</span>][red_chosen]+ graph[red_chosen][i])&#123;</span><br><span class="line">                      </span><br><span class="line">                      <span class="comment">//last_col[i] = 1- last_col[chosen];</span></span><br><span class="line">                      min_len[<span class="number">1</span>][i] = <span class="built_in">std</span>::min(min_len[<span class="number">1</span>][i], min_len[<span class="number">0</span>][red_chosen]+graph[red_chosen][i]);</span><br><span class="line">                     </span><br><span class="line">                     &#125; </span><br><span class="line">                     </span><br><span class="line">                     &#125;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span>(blue_max_!=<span class="number">0x3f3f3f3f</span>)&#123;</span><br><span class="line"></span><br><span class="line">                used[<span class="number">1</span>][blue_chosen] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123; <span class="comment">// 更新路径距离</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(!used[<span class="number">0</span>][i] &amp;&amp; color[blue_chosen][i] != <span class="number">1</span> ) &#123; <span class="comment">// 1 or 2 </span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(min_len[<span class="number">0</span>][i]&gt; min_len[<span class="number">1</span>][blue_chosen]+ graph[blue_chosen][i])&#123;</span><br><span class="line">                      </span><br><span class="line">                      <span class="comment">//last_col[i] = 1- last_col[chosen];</span></span><br><span class="line"></span><br><span class="line">                      min_len[<span class="number">0</span>][i] = <span class="built_in">std</span>::min(min_len[<span class="number">0</span>][i], min_len[<span class="number">1</span>][blue_chosen]+graph[blue_chosen][i]);</span><br><span class="line">                     </span><br><span class="line">                     &#125; </span><br><span class="line">                     </span><br><span class="line">                     &#125;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(n,<span class="number">0x3f3f3f3f</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt; n; i++ )&#123;</span><br><span class="line">           <span class="keyword">if</span>(min_len[<span class="number">0</span>][i]==<span class="number">0x3f3f3f3f</span> &amp;&amp; min_len[<span class="number">1</span>][i]==<span class="number">0x3f3f3f3f</span>) res[i]=<span class="number">-1</span>;</span><br><span class="line">           <span class="keyword">else</span> res[i] = <span class="built_in">std</span>::min(min_len[<span class="number">0</span>][i],min_len[<span class="number">1</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读者写者模型</title>
      <link href="/2019/12/24/%E8%AF%BB%E8%80%85%E5%86%99%E8%80%85%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/12/24/%E8%AF%BB%E8%80%85%E5%86%99%E8%80%85%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>读者写者问题是另一个经典的线程同步问题.</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>一个数据由多个线程共享，这些线程分为两类，一类是读者线程，一类是写者线程。读者线程只读数据，不修改数据，写者线程会修改数据。读读不互斥，写和读，写和写都互斥，也就是只要有一个写线程，其他线程就不能访问数据.</p><h2 id="读者优先实现"><a href="#读者优先实现" class="headerlink" title="读者优先实现"></a>读者优先实现</h2><p>mutext = 1<br>wrt = semaphore(1)<br>readcount =0</p><p>读者：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">p(mutex)</span><br><span class="line">readcount++</span><br><span class="line"><span class="keyword">if</span>(readcount==<span class="number">1</span>)</span><br><span class="line">   p(wrt)</span><br><span class="line">v(mutex)</span><br><span class="line"></span><br><span class="line">read</span><br><span class="line"></span><br><span class="line">p(mutext)</span><br><span class="line">readcount--</span><br><span class="line"><span class="keyword">if</span>(readcount==<span class="number">0</span>)</span><br><span class="line">   v(wrt)</span><br><span class="line">v(mutex)</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>写者：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"></span><br><span class="line">p(wrt)</span><br><span class="line"></span><br><span class="line">write</span><br><span class="line"></span><br><span class="line">v(wrt)</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure></p><p>仔细分析，上面的程序，只要有一个写者，其他线程就不能访问数据，一旦有一个读者获取wrt从而访问数据，其他的读者就能能够一起访问数据。可以看出上面的程序是读者优先的，一旦有一个读者获取到wrt，其他读者就能够源源不断的访问数据，从而饿死写者.</p><h2 id="写者优先实现"><a href="#写者优先实现" class="headerlink" title="写者优先实现"></a>写者优先实现</h2><h2 id="公平竞争"><a href="#公平竞争" class="headerlink" title="公平竞争"></a>公平竞争</h2>]]></content>
      
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零拷贝</title>
      <link href="/2019/12/24/%E9%9B%B6%E6%8B%B7%E8%B4%9D/"/>
      <url>/2019/12/24/%E9%9B%B6%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IPC(进程间通信)</title>
      <link href="/2019/12/23/IPC-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/12/23/IPC-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>select/poll/epoll</title>
      <link href="/2019/12/23/select-poll-epoll/"/>
      <url>/2019/12/23/select-poll-epoll/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>双指针</title>
      <link href="/2019/12/23/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
      <url>/2019/12/23/%E5%8F%8C%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二分法的两种写法</title>
      <link href="/2019/12/23/%E4%BA%8C%E5%88%86%E6%B3%95%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/"/>
      <url>/2019/12/23/%E4%BA%8C%E5%88%86%E6%B3%95%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="在一个排序数组nums中找-lt-target的最大的数"><a href="#在一个排序数组nums中找-lt-target的最大的数" class="headerlink" title="在一个排序数组nums中找&lt;=target的最大的数"></a>在一个排序数组nums中找&lt;=target的最大的数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> middle = (l+r+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(nums[middle]&lt;=target)l =middle ; <span class="keyword">else</span> r = middle <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> nums[l];</span><br></pre></td></tr></table></figure><h2 id="在一个排序数组nums中找-gt-x的最小的数"><a href="#在一个排序数组nums中找-gt-x的最小的数" class="headerlink" title="在一个排序数组nums中找&gt;=x的最小的数"></a>在一个排序数组nums中找&gt;=x的最小的数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line"><span class="keyword">int</span> middle = (l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(nums[middle]&gt;=x) r = middle; <span class="keyword">else</span> l = middle + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nums[l];</span><br></pre></td></tr></table></figure><p>以上两种写法能保证循环退出时，l==r, 来自于算法竞赛进阶指南.</p><h2 id="leetcode例题"><a href="#leetcode例题" class="headerlink" title="leetcode例题"></a>leetcode例题</h2><p><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener">34. 在排序数组中查找元素的第一个和最后一个位置</a></p><p>很直接的用两种二分法各求一遍，得到答案.</p><p>代码如下:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">lass Solution &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; searchRange(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.size()==<span class="number">0</span>)<span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="comment">// O(logn) 二分</span></span><br><span class="line">       <span class="keyword">int</span> l = <span class="number">0</span> , r = nums.size()<span class="number">-1</span>;</span><br><span class="line">       <span class="keyword">int</span> left = <span class="number">-1</span>, right =<span class="number">-1</span>;</span><br><span class="line">       <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid  =(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;=target) r = mid; <span class="keyword">else</span> l = mid +<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(nums[l]==target)left = l;</span><br><span class="line">        </span><br><span class="line">        l = <span class="number">0</span>, r = nums.size()<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//     while(l&lt;r)&#123;</span></span><br><span class="line">    <span class="comment">//         int mid  =(l+r)/2;</span></span><br><span class="line">    <span class="comment">//         if(nums[mid]&gt;target) r = mid-1; else l = mid +1;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//    right = l-1;</span></span><br><span class="line">    <span class="comment">//    left =l;</span></span><br><span class="line">       </span><br><span class="line">          <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid  =(l+r+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;=target) l = mid; <span class="keyword">else</span> r = mid <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(nums[l]==target)right = l;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> &#123;left,right&#125;; </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓄水池抽样</title>
      <link href="/2019/12/23/%E8%93%84%E6%B0%B4%E6%B1%A0%E6%8A%BD%E6%A0%B7/"/>
      <url>/2019/12/23/%E8%93%84%E6%B0%B4%E6%B1%A0%E6%8A%BD%E6%A0%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>从n条数据中，随机抽取k条数据，要求每条数据被抽取到的概率相等即$ \frac{k}{n} $.</p><h2 id="算法伪代码"><a href="#算法伪代码" class="headerlink" title="算法伪代码"></a>算法伪代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Init : a reservoir with the size： k  </span><br><span class="line"><span class="keyword">for</span> i= k+<span class="number">1</span> to N </span><br><span class="line">    M=random(<span class="number">1</span>, i);  </span><br><span class="line">    <span class="keyword">if</span>( M &lt; k)  </span><br><span class="line">     SWAP the Mth value <span class="keyword">and</span> ith value  </span><br><span class="line">end <span class="keyword">for</span></span><br></pre></td></tr></table></figure><p>首先直接用前k条数据初始化一个size为k的蓄水池.然后对从k+1到N的数据进行遍历，对于第i条数据，它有 $ \frac{k}{i}$的概率被选中，然后以 $\frac{1}{k}$的概率替换掉蓄水池中的任意一条数据. </p><h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><p>我们来证明一下，这个算法使得每条数据被选中的概率是相等的。</p><p>对于第k+1条数据，它被选中的概率是$\frac{k}{k+1}$,对于前k条数据，被选中的概率是1-被第k+1条数据替换的概率= $ 1- \frac{k}{k+1}\cdot\frac{1}{k} = \frac{k}{k+1}$.</p><p>假设前i条数据，每条被选中的概率是 $\frac{k}{i}$ . 那么前i+1条数据，对于第i+1条数据，被选中的概率是$\frac{k}{i+1}$, 前i条数据每条被选中的概率是前i次被选中概率乘以(1-被第i+1条数据替换的概率)，也就是$\frac{k}{i}\cdot\left(1-\frac{k}{i+1}\cdot\frac{1}{k}\right) = \frac{k}{i+1} $. 所以前i+1条数据，每条被选中的概率是$\frac{k}{i+1}$.</p><h2 id="leetcode例题"><a href="#leetcode例题" class="headerlink" title="leetcode例题"></a>leetcode例题</h2><p>leetcode中有很多题涉及到蓄水池抽样问题.比如第382题<a href="https://leetcode-cn.com/problems/linked-list-random-node/" target="_blank" rel="noopener">链表随机节点</a></p><p>题目：</p><p>给定一个不知道长度的单链表，让我们随机返回其中一个节点的值，保证每个节点被采样的概率相等。这赤裸裸的蓄水池抽样，k为1.</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** @param head The linked list's head.</span></span><br><span class="line"><span class="comment">        Note that the head is guaranteed to be not null, so it contains at least one node. */</span></span><br><span class="line">    Solution(ListNode* head) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;head = head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns a random node's value. */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> chosen;</span><br><span class="line">        ListNode* p = <span class="keyword">this</span>-&gt;head;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">int</span> rank = rand()%cnt;</span><br><span class="line">            <span class="keyword">if</span>(rank&lt;<span class="number">1</span>) chosen = p-&gt;val;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chosen;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* head;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Solution* obj = new Solution(head);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;getRandom();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>从相似题目中还可以找到<a href="https://leetcode-cn.com/problems/random-pick-index/" target="_blank" rel="noopener">398. 随机数索引</a></p><p>题目：</p><p>给定一个数组里可能有重复的数，搜索数组，返回给定数的下标，如果给定数在数组中有多个的话，返回每个下标的概率相等</p><p>其实就是变了一下，在所有等于给定数的数中选取一个，返回下标，那么我们遍历，如果当前数等于给定数，我们把cnt++.</p><p>代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Solution(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums):nums(nums) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pick</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">int</span> res= <span class="number">0</span> ;    </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==target)&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                <span class="keyword">int</span> index =rand()%cnt;</span><br><span class="line">                <span class="keyword">if</span>(index&lt;<span class="number">1</span>)res = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;   </span><br><span class="line">    &#125;</span><br><span class="line">   <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Solution* obj = new Solution(nums);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;pick(target);</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zeromq(1)</title>
      <link href="/2019/12/19/zeromq-1/"/>
      <url>/2019/12/19/zeromq-1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在ps-lite中使用了zeromq作为通信库，因此来学习一下zeromq,看了资料收虽然zeromq叫mq,但是并不传统意义山的消息队列，更像是一个网络通信库。</p><h2 id><a href="#" class="headerlink" title=" "></a> </h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><p><a href="https://github.com/anjuke/zguide-cn/blob/master/chapter1.md" target="_blank" rel="noopener">ZeroMQ基础</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哲学家就餐问题</title>
      <link href="/2019/12/08/%E5%93%B2%E5%AD%A6%E5%AE%B6%E5%B0%B1%E9%A4%90%E9%97%AE%E9%A2%98/"/>
      <url>/2019/12/08/%E5%93%B2%E5%AD%A6%E5%AE%B6%E5%B0%B1%E9%A4%90%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>哲学家就餐问题是经典的线程同步问题。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>有5个哲学家围坐在一个圆桌上，桌上有5盘食物，5个叉子，如下图所示:<br><img src="/images/Philosophers/phi.jpeg" alt title="哲学家就餐问题"><br>哲学家就餐或者思考，就餐时哲学家会拿起左右手的两个叉子，只有当两个叉子都拿到时，哲学家才能进行就餐，在没有拿到所有叉子前，不会放下手中的叉子.</p><h2 id="可能死锁的实现"><a href="#可能死锁的实现" class="headerlink" title="可能死锁的实现"></a>可能死锁的实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">semaphore forks[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> philosopher i:</span><br><span class="line">  <span class="keyword">do</span>&#123;</span><br><span class="line"></span><br><span class="line">    p(forks[i]);</span><br><span class="line">    p(forks[(i+<span class="number">1</span>)%<span class="number">5</span>]);</span><br><span class="line">    就餐</span><br><span class="line">    v(forks[i]);</span><br><span class="line">    v(forks[(i+<span class="number">1</span>)%<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line"> &#125;<span class="keyword">while</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>当所有的哲学家同时拿起左手边的叉子的时候，系统就死锁了，他们都拿不到右手边的叉子，但是又不放下左手边的叉子，最后都饿死了.</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>我们总结下导致死锁的原因和四个必要条件:</p>]]></content>
      
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++进程同步和线程同步</title>
      <link href="/2019/12/08/c-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E5%92%8C%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
      <url>/2019/12/08/c-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E5%92%8C%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>petuum的ssp实现流程</title>
      <link href="/2019/12/08/petuum%E7%9A%84ssp%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B/"/>
      <url>/2019/12/08/petuum%E7%9A%84ssp%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>psAllreduce</title>
      <link href="/2019/12/07/psAllreduce/"/>
      <url>/2019/12/07/psAllreduce/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近一直对ps-lite增加功能, 这段时间准备借鉴petuum的方式增加ssp,以后功能越来越全以后，和nccl结合搞一个混合的数据并行的框架。</p><h2 id><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
      
      
      
        <tags>
            
            <tag> DDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>petuum/paracel/Angel/ps-lite/byteps</title>
      <link href="/2019/12/06/petuum-paracel-Angel-ps-lite-byteps/"/>
      <url>/2019/12/06/petuum-paracel-Angel-ps-lite-byteps/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>库函数与系统调用的区别</title>
      <link href="/2019/12/06/%E5%BA%93%E5%87%BD%E6%95%B0%E4%B8%8E%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/12/06/%E5%BA%93%E5%87%BD%E6%95%B0%E4%B8%8E%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多继承与虚基类</title>
      <link href="/2019/12/06/%E5%A4%9A%E7%BB%A7%E6%89%BF%E4%B8%8E%E8%99%9A%E5%9F%BA%E7%B1%BB/"/>
      <url>/2019/12/06/%E5%A4%9A%E7%BB%A7%E6%89%BF%E4%B8%8E%E8%99%9A%E5%9F%BA%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>c++ 支持多继承，多继承会带来一些问题，比如典型的菱形继承中，会出现最开始的基类在派生类对象中存在两份拷贝的问题，也就会出现二义性。为了消除这种二义性，我们可以使用虚继承，使得基类在派生类中只有一份拷贝。而c++的虚继承的实现方式一般是用一个指针指向虚基类表，但是在最新的g++编译器中，已经把虚表指针和虚基类表指针给合并了，本来这些都是编译器的具体实现，而c++规范中并没有明确具体的实现方式。</p><h2 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h2><p>菱形继承如下图所示，v代表B,C虚继承A,A是虚基类：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/****************************/</span></span><br><span class="line"><span class="comment">/*                          */</span></span><br><span class="line"><span class="comment">/*             A            */</span></span><br><span class="line"><span class="comment">/*           v/ \v          */</span></span><br><span class="line"><span class="comment">/*           /   \          */</span></span><br><span class="line"><span class="comment">/*          B     C         */</span></span><br><span class="line"><span class="comment">/*           \   /          */</span></span><br><span class="line"><span class="comment">/*            \ /           */</span></span><br><span class="line"><span class="comment">/*             D            */</span></span><br><span class="line"><span class="comment">/*                          */</span></span><br><span class="line"><span class="comment">/****************************/</span></span><br></pre></td></tr></table></figure><h2 id="虚继承的的对象内存布局"><a href="#虚继承的的对象内存布局" class="headerlink" title="虚继承的的对象内存布局"></a>虚继承的的对象内存布局</h2><p>具体见参考,g++的实现是将虚基类放在派生类对象的底部。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ax;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f0</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"A: bar()"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> A           <span class="comment">/****************************/</span></span><br><span class="line">&#123;                                     <span class="comment">/*                          */</span></span><br><span class="line">    <span class="keyword">int</span> bx;</span><br><span class="line">   B()&#123; bx=<span class="number">5</span>;&#125;                        <span class="comment">/*             A            */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f0</span><span class="params">()</span> override </span>&#123;&#125;             <span class="comment">/*           v/ \v          */</span></span><br><span class="line">&#125;;                                    <span class="comment">/*           /   \          */</span></span><br><span class="line">                                      <span class="comment">/*          B     C         */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> A           <span class="comment">/*           \   /          */</span></span><br><span class="line">&#123;                                     <span class="comment">/*            \ /           */</span></span><br><span class="line">    <span class="keyword">int</span> cx;</span><br><span class="line">    C()&#123;cx=<span class="number">8</span>;&#125;                        <span class="comment">/*             D            */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f0</span><span class="params">()</span> override </span>&#123;&#125;             <span class="comment">/*                          */</span></span><br><span class="line">&#125;;                                    <span class="comment">/****************************/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">D</span> :</span> <span class="keyword">public</span> B, <span class="keyword">public</span> C</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> dx;</span><br><span class="line">    D()&#123;dx=<span class="number">6</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f0</span><span class="params">()</span> override </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt; <span class="number">9</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*func)</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">D d;</span><br><span class="line"><span class="keyword">long</span>* p = (<span class="keyword">long</span>*)&amp;d;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> address = *p;</span><br><span class="line">func q =(func)(*(<span class="keyword">long</span>*)address);</span><br><span class="line"></span><br><span class="line">q();</span><br><span class="line"></span><br><span class="line">p++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t = (*(<span class="keyword">int</span>*)p);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;t&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>* u = (<span class="keyword">int</span>*)p;</span><br><span class="line">u+=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">q = (func)( *(<span class="keyword">long</span>*) (*(<span class="keyword">long</span>*)u) );</span><br><span class="line">q();</span><br><span class="line"><span class="keyword">long</span>* y = (<span class="keyword">long</span>*)u;</span><br><span class="line">y++;</span><br><span class="line">u = (<span class="keyword">int</span>*)y;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;*u&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">u+=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;*u&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">u+=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">q = (func)( *((<span class="keyword">long</span>*) (*((<span class="keyword">long</span>*)u))+<span class="number">1</span>) );</span><br><span class="line">q();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的测试代码中u+=2是处于内存对齐的考虑.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/41309205" target="_blank" rel="noopener">c++虚继承和虚基类</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unordered_map实现</title>
      <link href="/2019/12/05/unordered-map%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/12/05/unordered-map%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>weak_ptr实现</title>
      <link href="/2019/12/05/weak-ptr%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/12/05/weak-ptr%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>weak_ptr是为了解决shared_ptr存在的循环引用问题而诞生的。它依赖于shared_ptr,不能直接管理一块动态开辟的空间。不具备普通指针的行为operator*和operator-&gt;。构造weak_ptr不会引起引用计数的变化。</p><h2 id="循环引用问题"><a href="#循环引用问题" class="headerlink" title="循环引用问题"></a>循环引用问题</h2><p>代码见<a href="https://github.com/zmx19951103/smart-pointer" target="_blank" rel="noopener">smart pointer</a>中的<a href="https://github.com/zmx19951103/smart-pointer/blob/master/crossRef.cc" target="_blank" rel="noopener">crossRef.cc</a>。</p><h2 id="weak-ptr实现"><a href="#weak-ptr实现" class="headerlink" title="weak_ptr实现"></a>weak_ptr实现</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/qq_34992845/article/details/69218843" target="_blank" rel="noopener">weak_ptr源码分析</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++模板类的分离式编译</title>
      <link href="/2019/12/05/c-%E6%A8%A1%E6%9D%BF%E7%B1%BB%E7%9A%84%E5%88%86%E7%A6%BB%E5%BC%8F%E7%BC%96%E8%AF%91/"/>
      <url>/2019/12/05/c-%E6%A8%A1%E6%9D%BF%E7%B1%BB%E7%9A%84%E5%88%86%E7%A6%BB%E5%BC%8F%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在实现自己的shared_ptr的时候，习惯性的将模板类的接口和实现分别放在对应的.h文件和.cc文件中，然后在test.cc文件中包含.h头文件，进行测试，结果总是报undefinend reference的错误，一开始感觉很奇怪，我明明在编译的时候将模板类的.cc文件给包含进来了，可是居然在链接的时候找不到。最后查到了原因。原来编译器对模板类的分离式编译支持的非常差，比如STL的代码中都是将模板类的接口和实现放在一起的。虽然有可以分离编译的方法，但是主流还是将接口和实现放在同一个.h文件中，简单而且跨平台兼容。</p><p>之所以分离式编译的时候出现问题，是因为我们的模板类的.cc文件中只include模板类的.h文件，然后也没有对具体typename类型的调用(没有调用所以没有隐式实例化)，所以编译成的模板类的.o文件中是没有具体实例化的模板类的代码的，所以链接的时候找不到实例化类的代码。</p><h2 id="分离式编译"><a href="#分离式编译" class="headerlink" title="分离式编译"></a>分离式编译</h2><p>[1]DSharedPtr.h</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSharedPtr</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T * _ptr;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;T*,<span class="keyword">int</span>&gt;  _cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">DSharedPtr(T* ptr=<span class="literal">nullptr</span>);</span><br><span class="line">~DSharedPtr();</span><br><span class="line">DSharedPtr(DSharedPtr&lt;T&gt;&amp; src);</span><br><span class="line">DSharedPtr&amp; <span class="keyword">operator</span>=(DSharedPtr&lt;T&gt;&amp; src);</span><br><span class="line">T&amp; <span class="keyword">operator</span>*();</span><br><span class="line">T* <span class="keyword">operator</span>-&gt;();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>[2]DSharedPtr.cc<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"./DSharedPtr.h"</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;T*,<span class="keyword">int</span>&gt; DSharedPtr&lt;T&gt;::_cnt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">DSharedPtr&lt;T&gt;::DSharedPtr(T* ptr)&#123;</span><br><span class="line"> _ptr = ptr;</span><br><span class="line"><span class="keyword">if</span>(_cnt.count(ptr)==<span class="number">0</span>)_cnt[ptr] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> _cnt[ptr]+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">DSharedPtr&lt;T&gt;::~DSharedPtr()&#123;</span><br><span class="line"></span><br><span class="line">--_cnt[_ptr];</span><br><span class="line"><span class="keyword">if</span>(_cnt[_ptr]&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">_cnt.erase(_ptr);</span><br><span class="line"><span class="keyword">delete</span> _ptr; <span class="comment">// delete nullptr is ok </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">DSharedPtr&lt;T&gt;::DSharedPtr(DSharedPtr&lt;T&gt;&amp; src)&#123;</span><br><span class="line">_ptr = src._ptr;</span><br><span class="line">_cnt[_ptr]+=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">DSharedPtr&lt;T&gt;&amp; DSharedPtr&lt;T&gt;::<span class="keyword">operator</span>=(DSharedPtr&lt;T&gt;&amp; src)&#123;</span><br><span class="line"><span class="keyword">if</span>(_ptr==src._ptr) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">--_cnt[_ptr];</span><br><span class="line"><span class="keyword">if</span> (_cnt[_ptr]&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">_cnt.erase(_ptr);</span><br><span class="line"><span class="keyword">delete</span> _ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_ptr = src._ptr;</span><br><span class="line">_cnt[_ptr]+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; DSharedPtr&lt;T&gt;::<span class="keyword">operator</span>*()&#123;</span><br><span class="line"><span class="keyword">return</span> *_ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//why </span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T* DSharedPtr&lt;T&gt;::<span class="keyword">operator</span>-&gt;()&#123;</span><br><span class="line"><span class="keyword">return</span> _ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSharedPtr</span>&lt;int&gt;;</span> <span class="comment">// 类模板的显示实例化</span></span><br></pre></td></tr></table></figure></p><p>[3]test.cc<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"./DSharedPtr.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>);</span><br><span class="line">DSharedPtr&lt;<span class="keyword">int</span>&gt; mshared_p1(p);</span><br><span class="line">DSharedPtr&lt;<span class="keyword">int</span>&gt; mshared_p2(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">20</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *mshared_p1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *mshared_p2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为有类模板的显示实例化，所以上面的程序可以编译运行。</p><h2 id="将接口和实现放在同一个-h文件中"><a href="#将接口和实现放在同一个-h文件中" class="headerlink" title="将接口和实现放在同一个.h文件中"></a>将接口和实现放在同一个.h文件中</h2><p>不过最主流的做法还是将模板类的接口和实现放在同一个.h文件中,如下:</p><p>[1]DSharedPtr.h</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSharedPtr</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T * _ptr;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;T*,<span class="keyword">int</span>&gt;  _cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">DSharedPtr(T* ptr=<span class="literal">nullptr</span>);</span><br><span class="line">~DSharedPtr();</span><br><span class="line">DSharedPtr(DSharedPtr&lt;T&gt;&amp; src);</span><br><span class="line">DSharedPtr&amp; <span class="keyword">operator</span>=(DSharedPtr&lt;T&gt;&amp; src);</span><br><span class="line">T&amp; <span class="keyword">operator</span>*();</span><br><span class="line">T* <span class="keyword">operator</span>-&gt;();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">emplate&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;T*,<span class="keyword">int</span>&gt; DSharedPtr&lt;T&gt;::_cnt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">DSharedPtr&lt;T&gt;::DSharedPtr(T* ptr)&#123;</span><br><span class="line"> _ptr = ptr;</span><br><span class="line"><span class="keyword">if</span>(_cnt.count(ptr)==<span class="number">0</span>)_cnt[ptr] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> _cnt[ptr]+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">DSharedPtr&lt;T&gt;::~DSharedPtr()&#123;</span><br><span class="line"></span><br><span class="line">--_cnt[_ptr];</span><br><span class="line"><span class="keyword">if</span>(_cnt[_ptr]&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">_cnt.erase(_ptr);</span><br><span class="line"><span class="keyword">delete</span> _ptr; <span class="comment">// delete nullptr is ok </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">DSharedPtr&lt;T&gt;::DSharedPtr(DSharedPtr&lt;T&gt;&amp; src)&#123;</span><br><span class="line">_ptr = src._ptr;</span><br><span class="line">_cnt[_ptr]+=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">DSharedPtr&lt;T&gt;&amp; DSharedPtr&lt;T&gt;::<span class="keyword">operator</span>=(DSharedPtr&lt;T&gt;&amp; src)&#123;</span><br><span class="line"><span class="keyword">if</span>(_ptr==src._ptr) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">--_cnt[_ptr];</span><br><span class="line"><span class="keyword">if</span> (_cnt[_ptr]&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">_cnt.erase(_ptr);</span><br><span class="line"><span class="keyword">delete</span> _ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_ptr = src._ptr;</span><br><span class="line">_cnt[_ptr]+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; DSharedPtr&lt;T&gt;::<span class="keyword">operator</span>*()&#123;</span><br><span class="line"><span class="keyword">return</span> *_ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//why </span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T* DSharedPtr&lt;T&gt;::<span class="keyword">operator</span>-&gt;()&#123;</span><br><span class="line"><span class="keyword">return</span> _ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就不用类模板的显示实例化。上面的shared_ptr代码需要进一步改进，来支持多线程下的线程安全以及存在循环引用的问题。进一步改进的代码会在中<a href="https://github.com/zmx19951103/smart-pointer" target="_blank" rel="noopener">smart pointer</a>进行更新。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/u012814856/article/details/84645963" target="_blank" rel="noopener">c++模板类的分离式编译</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>new与malloc的区别</title>
      <link href="/2019/12/04/new%E4%B8%8Emalloc%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/12/04/new%E4%B8%8Emalloc%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>shared_ptr实现</title>
      <link href="/2019/12/04/shared-ptr%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/12/04/shared-ptr%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>c++面试经常会问到智能指针，我们来实现一下shared_ptr，探究一下智能指针的原理。shared_ptr的核心就是【引用计数】的实现，还有shared_ptr貌似在多线程的环境下是有问题的。智能指针主要是用来解决原生指针可能造成的问题，比如忘记手动释放内存造成内存泄漏等等。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多个进程调用同一个.so文件</title>
      <link href="/2019/12/04/%E5%A4%9A%E4%B8%AA%E8%BF%9B%E7%A8%8B%E8%B0%83%E7%94%A8%E5%90%8C%E4%B8%80%E4%B8%AA-so%E6%96%87%E4%BB%B6/"/>
      <url>/2019/12/04/%E5%A4%9A%E4%B8%AA%E8%BF%9B%E7%A8%8B%E8%B0%83%E7%94%A8%E5%90%8C%E4%B8%80%E4%B8%AA-so%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vtable</title>
      <link href="/2019/12/04/vtable/"/>
      <url>/2019/12/04/vtable/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们知道c++的运行时动态是由虚函数来实现的,而虚函数的实现方式不同编译器不同，一个比较典型的实现方式就是使用vtable,vtabl中存储的是每个虚函数的地址, 并在对象中存储一个vptr,指向vtable.我们可以用指针来获取vtable，并且调用vtable中的成员函数。</p><h2 id="vtable"><a href="#vtable" class="headerlink" title="vtable"></a>vtable</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Base()&#123;;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">"Base:hello world"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">"Base:g"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">"Base:h"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base_2</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">Base_2()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">y</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">"Base_2:y()"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span>:</span> <span class="keyword">public</span> Base, <span class="keyword">public</span> Base_2</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    Derive()&#123; a = <span class="number">6</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">"hello world"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Derive:g"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">t</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"zmx"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>  a;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*Fun)</span><span class="params">(Derive* ptr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Derive *q = <span class="keyword">new</span> Derive();</span><br><span class="line">    Derive *p = <span class="keyword">new</span> Derive();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Derive *q = dynamic_cast&lt;Derive*&gt;( p);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> address = *(<span class="keyword">long</span>*)q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> address2 = *(<span class="keyword">long</span>*)p;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; address&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; address2&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Fun fun= (Fun)(*(<span class="keyword">long</span>*)address);</span><br><span class="line">    fun(q);</span><br><span class="line"></span><br><span class="line">    fun = (Fun)(*(((<span class="keyword">long</span>*)address)+<span class="number">1</span>));</span><br><span class="line">    fun(q);</span><br><span class="line"></span><br><span class="line">    fun = (Fun)(*(((<span class="keyword">long</span>*)address)+<span class="number">2</span>));</span><br><span class="line">    fun(q);</span><br><span class="line"></span><br><span class="line">    fun = (Fun)(*(((<span class="keyword">long</span>*)address)+<span class="number">3</span>));</span><br><span class="line">    fun(q);</span><br><span class="line"></span><br><span class="line">    address = *((<span class="keyword">long</span>*)q+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;address&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    fun= (Fun)(*(<span class="keyword">long</span>*)address);</span><br><span class="line">    fun(q);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//    fun = (Fun)(*(((long*)address)+1));</span></span><br><span class="line">     <span class="comment">//  fun(q);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// fun = (Fun)(*(((long*)address)+3));</span></span><br><span class="line">  <span class="comment">//  fun();</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    printf("sizeof(int))  :%d\n",sizeof(int));</span></span><br><span class="line"><span class="comment">    printf("sizeof(long)  :%d\n",sizeof(long));</span></span><br><span class="line"><span class="comment">    printf("sizeof(short) :%d\n",sizeof(short));</span></span><br><span class="line"><span class="comment">    printf("sizeof(char)  :%d\n",sizeof(char));</span></span><br><span class="line"><span class="comment">    printf("sizeof(float) :%d\n",sizeof(float));</span></span><br><span class="line"><span class="comment">    printf("sizeof(double):%d\n",sizeof(double));</span></span><br><span class="line"><span class="comment">    printf("sizeof(void*):%d\n",sizeof(void*));</span></span><br><span class="line"><span class="comment">    printf("sizeof(long long):%d\n",sizeof(long long));</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的运行结果如下：<br><img src="/images/vtable/vtable.png" alt="vtable" title="vtable"></p><p>在Linux64机器下指针的大小和long的大小一样都是8字节，我们从图中可以看到两个Derive对象中的vptr是一样的，也就是指向同一个vtable,也就是说同类对象的vtable是同一个。而且我们可以看到如果一个派生类有两个基类，两个基类都有virtual function，那么对应于每一个基类都会有各自的虚函数表(vtable),而且如果派生类中还有新的virtual function,会放在第一个基类的vtable中(按照基类的声明顺序),当然如果派生类有重写基类的虚方法，那么vtable中对应的函数会被替换成派生类中的。<br>因为我们的两个基类都没有数据成员，所以派生类对象中的基类部分只有vptr,所以我在获取第二个基类的vptr的时候，直接在第一个基类的地址上移动了一个位置。如果Base类中有一个long类型的成员数据，那么我就得移动两个位置，那才是Base_2类的vptr。可以直接在上面的程序上修改并且运行看看结果。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对c++对象模型有了实际的体验，有了进一步的理解.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/youxin/p/10853511.html" target="_blank" rel="noopener">vtable</a><br><a href="https://www.cnblogs.com/lsh123/p/7429475.html" target="_blank" rel="noopener">vtable</a><br><a href="https://www.cnblogs.com/ccXgc/p/8932759.html" target="_blank" rel="noopener">vtable</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mmap</title>
      <link href="/2019/12/03/mmap/"/>
      <url>/2019/12/03/mmap/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Raft</title>
      <link href="/2019/11/30/Raft/"/>
      <url>/2019/11/30/Raft/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>实现一个协程dreamcoroutine</title>
      <link href="/2019/11/30/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%8D%8F%E7%A8%8Bdreamcoroutine/"/>
      <url>/2019/11/30/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%8D%8F%E7%A8%8Bdreamcoroutine/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>强化学习调优</title>
      <link href="/2019/11/29/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%B0%83%E4%BC%98/"/>
      <url>/2019/11/29/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bayesian optimization</title>
      <link href="/2019/11/29/bayesian-optimization/"/>
      <url>/2019/11/29/bayesian-optimization/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深度学习框架的Layer和Net抽象:装饰器模式</title>
      <link href="/2019/11/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E7%9A%84Layer%E5%92%8CNet%E6%8A%BD%E8%B1%A1-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/11/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E7%9A%84Layer%E5%92%8CNet%E6%8A%BD%E8%B1%A1-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在完成了GraphExecutor,测试了最简单的一个例子，另外op的正确性先不测试，我打算先把Layer,Net和Solver的整体结构搭建出来。打算参考Caffe，但是肯定要简化好多好多。</p><h2 id="Layer"><a href="#Layer" class="headerlink" title="Layer"></a>Layer</h2><h2 id="Net"><a href="#Net" class="headerlink" title="Net"></a>Net</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      
      
      
        <tags>
            
            <tag> DDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++可调用对象:仿函数，lambda表达式</title>
      <link href="/2019/11/27/c-%E5%8F%AF%E8%B0%83%E7%94%A8%E5%AF%B9%E8%B1%A1-%E4%BB%BF%E5%87%BD%E6%95%B0%EF%BC%8Clambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/11/27/c-%E5%8F%AF%E8%B0%83%E7%94%A8%E5%AF%B9%E8%B1%A1-%E4%BB%BF%E5%87%BD%E6%95%B0%EF%BC%8Clambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>/dev/urandom</title>
      <link href="/2019/11/27/dev-urandom/"/>
      <url>/2019/11/27/dev-urandom/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>caffe的随机数产生方式</title>
      <link href="/2019/11/27/caffe%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%BA%A7%E7%94%9F%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/11/27/caffe%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%BA%A7%E7%94%9F%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>完成了DL框架的执行器，现在需要测试一下，需要为参数给定随机初始值，这里参考caffe的初始值生成方式,从源码来看使用的是boost库，caffe库的代码很不错，后续还要看考它的layer, net的设计。</p><h2 id="boost-mt19937"><a href="#boost-mt19937" class="headerlink" title="boost::mt19937"></a>boost::mt19937</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/wjgaas/p/3848979.html" target="_blank" rel="noopener">boost::mt19937</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> DDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚函数表</title>
      <link href="/2019/11/26/%E8%99%9A%E5%87%BD%E6%95%B0%E8%A1%A8/"/>
      <url>/2019/11/26/%E8%99%9A%E5%87%BD%E6%95%B0%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>noexcept</title>
      <link href="/2019/11/26/noexcept/"/>
      <url>/2019/11/26/noexcept/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>std::function</title>
      <link href="/2019/11/26/std-function/"/>
      <url>/2019/11/26/std-function/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>memory pool</title>
      <link href="/2019/11/26/memory-pool/"/>
      <url>/2019/11/26/memory-pool/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近继续写DL框架，因为涉及到频繁的new内存，开销很大会拖慢速度，所以准备用memory pool, 先开一个比较大的空间，这样的程序性能应该能提高。</p><h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>首先我们来学习一下内存池的理论，从字面意思上来看，内存池里应该有很多的内存，当我们需要一块内存的时候我们不用new或者malloc,而是从内存池里去拿就行，这样就减少了分配内存的开销，从而提升性能，不知道一次new操作会带来多大的开销呢?</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      
      
      
        <tags>
            
            <tag> DDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow Distribution Strategy API</title>
      <link href="/2019/11/25/tensorflow-Distribution-Strategy-API/"/>
      <url>/2019/11/25/tensorflow-Distribution-Strategy-API/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.jintiankansha.me/t/LNssWdHwrC" target="_blank" rel="noopener">Distribution Strategy API</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> DDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SparseTensor</title>
      <link href="/2019/11/24/SparseTensor/"/>
      <url>/2019/11/24/SparseTensor/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近看论文发现tf的Tensor分为 dense tensor 和 sparse tensor. 而 这篇论文就是对不同类型的tensor使用不同的梯度聚合架构，从而提出了一个混合架构,用于分布式深度学习数据并行训练。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/35803425/update-only-part-of-the-word-embedding-matrix-in-tensorflow?noredirect=1&amp;lq=1" target="_blank" rel="noopener">Update only part of the word embedding matrix in Tensorflow</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> DDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vector clock</title>
      <link href="/2019/11/24/vector-clock/"/>
      <url>/2019/11/24/vector-clock/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在分布式系统中，我们想要确定事件的因果关系，也就是事件发生的前后顺序，与此有关的算法有 Lamport clock, vector clock。</p><h2 id="Lamport-clock"><a href="#Lamport-clock" class="headerlink" title="Lamport clock"></a>Lamport clock</h2><h2 id="vector-clock"><a href="#vector-clock" class="headerlink" title="vector clock"></a>vector clock</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/foxmailed/archive/2012/01/11/2319854.html" target="_blank" rel="noopener">Lamport’s Logical Clocks 和 Vector Clock</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> distributed systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>distributed kv store</title>
      <link href="/2019/11/24/distributed-kv-store/"/>
      <url>/2019/11/24/distributed-kv-store/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>paxos and raft</title>
      <link href="/2019/11/24/paxos-and-raft/"/>
      <url>/2019/11/24/paxos-and-raft/</url>
      
        <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/liu-jianhao/Raft-Paxos-Sample" target="_blank" rel="noopener">github paxos raft</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> distributed system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>in graph and between graph</title>
      <link href="/2019/11/24/in-graph-and-between-graph/"/>
      <url>/2019/11/24/in-graph-and-between-graph/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIT6.824 lab1 mapreduce</title>
      <link href="/2019/11/24/MIT6-824-lab1-mapreduce/"/>
      <url>/2019/11/24/MIT6-824-lab1-mapreduce/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>std::mutex</title>
      <link href="/2019/11/24/std-mutex/"/>
      <url>/2019/11/24/std-mutex/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近看ps-lite代码，因为代码很多地方会涉及到多线程，有互斥量，条件变量等等。对c++11的多线程没怎么学过，所以就学习了一下。</p><h2 id="std-mutex"><a href="#std-mutex" class="headerlink" title="std::mutex"></a>std::mutex</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      
      
      
        <tags>
            
            <tag> c++11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MPI_Irecv</title>
      <link href="/2019/11/22/MPI-Irecv/"/>
      <url>/2019/11/22/MPI-Irecv/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>看baidu的allreduce实现，第一部分的ring reduce scatter用到了这个函数，所以来学习一下。</p><h2 id><a href="#" class="headerlink" title=" "></a> </h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mpi.deino.net/mpi_functions/MPI_Irecv.html" target="_blank" rel="noopener">MPI_Irecv</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>a hybrid framework providing ps and allreduce architecture for distributed deep learning</title>
      <link href="/2019/11/22/a-hybrid-framework-providing-ps-and-allreduce-architecture-for-distributed-deep-learning/"/>
      <url>/2019/11/22/a-hybrid-framework-providing-ps-and-allreduce-architecture-for-distributed-deep-learning/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>byteps源码解析(-)</title>
      <link href="/2019/11/22/byteps%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/11/22/byteps%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ps-lite实现异步sgd</title>
      <link href="/2019/11/22/ps-lite%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5sgd/"/>
      <url>/2019/11/22/ps-lite%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5sgd/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ps-lite的通信初始化</title>
      <link href="/2019/11/22/ps-lite%E7%9A%84%E9%80%9A%E4%BF%A1%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2019/11/22/ps-lite%E7%9A%84%E9%80%9A%E4%BF%A1%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在ps-lite中添加对变长value的支持</title>
      <link href="/2019/11/22/%E5%9C%A8ps-lite%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%AF%B9%E5%8F%98%E9%95%BFvalue%E7%9A%84%E6%94%AF%E6%8C%81/"/>
      <url>/2019/11/22/%E5%9C%A8ps-lite%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%AF%B9%E5%8F%98%E9%95%BFvalue%E7%9A%84%E6%94%AF%E6%8C%81/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MPI SendRecv</title>
      <link href="/2019/11/19/MPI-SendRecv/"/>
      <url>/2019/11/19/MPI-SendRecv/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>baidu allreduce 代码中用SendRecv实现了ring Allgather, 如果用 Send和Receive来实现的话，因为两个都是阻塞的，所以会死锁，一个解决方法是使用Irecv和Send,另一种方法就是使用SendRecv。  </p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>该函数的接口如下:<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MPI_Sendrecv</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *sendbuf,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">int</span> sendcount,</span></span></span><br><span class="line"><span class="function"><span class="params">                 MPI_Datatype sendtype,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">int</span> dest,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">int</span> sendtag,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">void</span> *recvbuf,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">int</span> recvcount, </span></span></span><br><span class="line"><span class="function"><span class="params">                 MPI_Datatype recvtype,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">int</span> source, </span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">int</span> recvtag,</span></span></span><br><span class="line"><span class="function"><span class="params">                 MPI_Comm comm,</span></span></span><br><span class="line"><span class="function"><span class="params">                 MPI_Status *status)</span></span></span><br></pre></td></tr></table></figure></p><p>每个参数都顾名思义，sendbuf是要发送的数据的地址，sendcount和sendtype是要发送数据的数量和类型，dest是目的进程的rank, sendtag和recvtag对应就好。recvbuf和recvcount是接收数据的缓冲区和接收的数量以及接收的类型,source表示从哪个进程接收,status应该是receive操作的状态。</p><p>我们用一个ring的例子来实践一下该函数,代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mpi.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> nProcs, Rank, i;</span><br><span class="line">    <span class="keyword">double</span> A0,A1;</span><br><span class="line">    MPI_Status status;</span><br><span class="line"> </span><br><span class="line">    MPI_Init(&amp;argc, &amp;argv);</span><br><span class="line">    MPI_Comm_size(MPI_COMM_WORLD, &amp;nProcs);</span><br><span class="line">    MPI_Comm_rank(MPI_COMM_WORLD, &amp;Rank);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//   for(int i=0; i&lt;n; i++)&#123;</span></span><br><span class="line"> <span class="comment">//     A0[i] = Rank;</span></span><br><span class="line"> <span class="comment">//     A1[i] = Rank;</span></span><br><span class="line">  <span class="comment">//  &#125;</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nBefore exchange A0 A1:\n"</span>);</span><br><span class="line">    <span class="comment">//for(i=0;i&lt;n;i++)&#123;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"rank:%d\t%f\t%f\n"</span>,Rank, A0, A1);</span><br><span class="line">    <span class="comment">//&#125;   </span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> rightrank = (Rank + <span class="number">1</span>) % nProcs;</span><br><span class="line">    <span class="keyword">int</span> leftrank = (Rank + nProcs<span class="number">-1</span>)%nProcs;</span><br><span class="line"> </span><br><span class="line">    MPI_Barrier(MPI_COMM_WORLD);</span><br><span class="line">    MPI_Sendrecv(&amp;A0, <span class="number">1</span>, MPI_DOUBLE, rightrank,<span class="number">990</span>,</span><br><span class="line">             &amp;A1, <span class="number">1</span>, MPI_DOUBLE, leftrank,<span class="number">990</span>,  MPI_COMM_WORLD,&amp;status);</span><br><span class="line"> </span><br><span class="line">    MPI_Finalize();</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"After exchange A0 A1\n"</span>);</span><br><span class="line"> <span class="comment">//   for(i=0;i&lt;n;i++)&#123;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"rank:%d %f\t%f\n"</span>,Rank,  A0, A1);</span><br><span class="line">  <span class="comment">//  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该代码的运行结果如下，可以看到每个进程都从它左边的进程接收了A1,因为每个进程都发送A0,所以A0是不变的<br><img src="/images/MPI_SendRecv/pro.png" alt title="SendRecv"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/kuangsyx/p/7903774.html" target="_blank" rel="noopener">MPI_SendRecv</a><br><a href="https://www.mpich.org/static/docs/v3.2.x/www3/MPI_Sendrecv.html" target="_blank" rel="noopener">MPI_SendRecv</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MPI Bcast,Gather,AllGather</title>
      <link href="/2019/11/19/MPI-Bcast-Gather-AllGather/"/>
      <url>/2019/11/19/MPI-Bcast-Gather-AllGather/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这几天看allreduce算法，发现基本的概念还是MPI那一套，而NCCL,baidu-allreduce都是集合通信的具体实现。所以回顾一下各个函数的意义。</p><h2 id="MPI-Reduce"><a href="#MPI-Reduce" class="headerlink" title="MPI_Reduce"></a>MPI_Reduce</h2><h2 id="MPI-Scatter"><a href="#MPI-Scatter" class="headerlink" title="MPI_Scatter"></a>MPI_Scatter</h2><p>scatter是把root进程拥有的一个数组分块，块数等于进程数，并根据进程的秩来发送对应块，第一块发送给进程0，以此类推。函数接口如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MPI_Scatter(</span><br><span class="line">    <span class="keyword">void</span>* send_data,</span><br><span class="line">    <span class="keyword">int</span> send_count,</span><br><span class="line">    MPI_Datatype send_datatype,</span><br><span class="line">    <span class="keyword">void</span>* recv_data,</span><br><span class="line">    <span class="keyword">int</span> recv_count,</span><br><span class="line">    MPI_Datatype recv_datatype,</span><br><span class="line">    <span class="keyword">int</span> root,</span><br><span class="line">    MPI_Comm communicator)</span><br></pre></td></tr></table></figure></p><p>测试代码如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是存在一个问题，如果数组的长度不能被进程数整除怎么办。</p><h2 id="MPI-Bcast"><a href="#MPI-Bcast" class="headerlink" title="MPI_Bcast"></a>MPI_Bcast</h2><p>broadcast就是把root进程的数据发送到其他的所有进程。示意图如下:<br><img src="/images/MPI_Allgather/broadcast.png" alt title="broadcast"><br>函数接口如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="MPI-Gather"><a href="#MPI-Gather" class="headerlink" title="MPI_Gather"></a>MPI_Gather</h2><p>MPI_Gather的作用就是把其他所有进程的数据收集到root进程来，和reduce不同的是没有reduce操作,只是单纯的收集。示意图如下：<br><img src="/images/MPI_Allgather/gather.png" alt title="gather"></p><p>接口如下:<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MPI_Gather(</span><br><span class="line">    <span class="keyword">void</span>* send_data,</span><br><span class="line">    <span class="keyword">int</span> send_count,</span><br><span class="line">    MPI_Datatype send_datatype,</span><br><span class="line">    <span class="keyword">void</span>* recv_data,</span><br><span class="line">    <span class="keyword">int</span> recv_count,</span><br><span class="line">    MPI_Datatype recv_datatype,</span><br><span class="line">    <span class="keyword">int</span> root,</span><br><span class="line">    MPI_Comm communicator)</span><br></pre></td></tr></table></figure></p><p>send_data, send_count以及send_datatype都是发送数据的参数，意思也是很明显的。receive同理，这里有一个root参数用来指定root进程。对于root进程需要秩指定recv_data,其他进程可以传递NULL给recv_data,实践发现对于其他进程recv_count和recv_datatype也是可以胡乱指定的。程序如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mpi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mpi_error ;</span><br><span class="line"></span><br><span class="line">mpi_error = MPI_Init(<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(mpi_error!=MPI_SUCCESS)&#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"MPI_Init failed with an error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rank,size;</span><br><span class="line">mpi_error = MPI_Comm_rank(MPI_COMM_WORLD,&amp;rank);</span><br><span class="line"><span class="keyword">if</span>(mpi_error!=MPI_SUCCESS)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"MPI_Comm_rank failed with an error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mpi_error = MPI_Comm_size(MPI_COMM_WORLD,&amp;size);</span><br><span class="line"><span class="keyword">if</span>(mpi_error!=MPI_SUCCESS)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"MPI_Comm_size failed with an error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> length = rank;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; lengths(size);</span><br><span class="line"></span><br><span class="line"><span class="comment">//MPI_Allgather(&amp;length,1,MPI_UNSIGNED_LONG,&amp;lengths[0],1,MPI_UNSIGNED_LONG,MPI_COMM_WORLD);</span></span><br><span class="line"><span class="keyword">if</span>(rank==<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">MPI_Allgather(&amp;length,<span class="number">1</span>,MPI_UNSIGNED_LONG,&amp;lengths[<span class="number">0</span>],<span class="number">1</span>,MPI_UNSIGNED_LONG,MPI_COMM_WORLD);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> t:lengths)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt; t &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">MPI_Allgather(&amp;length,<span class="number">1</span>,MPI_UNSIGNED_LONG,<span class="literal">NULL</span>,<span class="number">1</span>,MPI_UNSIGNED_LONG,MPI_COMM_WORLD);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MPI_Finalize();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MPI-Allgather"><a href="#MPI-Allgather" class="headerlink" title="MPI_Allgather"></a>MPI_Allgather</h2><p>MPI_Gather将其他所有进程的数据收集到root进程上,与MPI_Scatter相反。而MPI_Allgather也是收集所有进程上的数据，但是它不仅仅将数据收集到root进程，而是收集到所有的进程，图示如下：<br><img src="/images/MPI_Allgather/allgather.png" alt title="allgather"><br>在每个进程上，收到的数据都会按照发送该数据的进程的秩来排序。Allgather的接口如下:<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MPI_Allgather(</span><br><span class="line">    <span class="keyword">void</span>* send_data,</span><br><span class="line">    <span class="keyword">int</span> send_count,</span><br><span class="line">    MPI_Datatype send_datatype,</span><br><span class="line">    <span class="keyword">void</span>* recv_data,</span><br><span class="line">    <span class="keyword">int</span> recv_count,</span><br><span class="line">    MPI_Datatype recv_datatype,</span><br><span class="line">    MPI_Comm communicator)</span><br></pre></td></tr></table></figure></p><p>send_data,send_count,send_datatype分别是每个进程要发送的数据地址，发送的数据量以及数据的类型，需要注意的是接收部分的参数，recv_data是接收数据缓冲区，recv_count表示的是从每个进程接收多少数据而不是从其他进程接收的总的数据，这个要注意。其他的都很清楚。<br>我们用一个简单的程序来实践一下，我们用MPI process的秩来初始化该进程的length变量,然后将length发送出去，当Allgather过程结束后，每个进程应该会有一个 数组，长度为总的进程数，然后里面的值为每个进程的length变量值，按照进程的秩排好序的。程序如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mpi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mpi_error ;</span><br><span class="line"></span><br><span class="line">mpi_error = MPI_Init(<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(mpi_error!=MPI_SUCCESS)&#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"MPI_Init failed with an error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rank,size;</span><br><span class="line">mpi_error = MPI_Comm_rank(MPI_COMM_WORLD,&amp;rank);</span><br><span class="line"><span class="keyword">if</span>(mpi_error!=MPI_SUCCESS)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"MPI_Comm_rank failed with an error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mpi_error = MPI_Comm_size(MPI_COMM_WORLD,&amp;size);</span><br><span class="line"><span class="keyword">if</span>(mpi_error!=MPI_SUCCESS)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"MPI_Comm_size failed with an error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> length = rank;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; lengths(size);</span><br><span class="line"></span><br><span class="line">MPI_Allgather(&amp;length,<span class="number">1</span>,MPI_UNSIGNED_LONG,&amp;lengths[<span class="number">0</span>],<span class="number">1</span>,MPI_UNSIGNED_LONG,MPI_COMM_WORLD);</span><br><span class="line"><span class="keyword">if</span>(rank==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> t:lengths)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt; t &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MPI_Finalize();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>开了10个进程，运行结果如下：<br><img src="/images/MPI_Allgather/pro.png" alt title="result"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://scc.ustc.edu.cn/zlsc/cxyy/200910/MPICH/mpi47.htm" target="_blank" rel="noopener">MPI Allgather</a><br><a href="https://mpitutorial.com/tutorials/mpi-scatter-gather-and-allgather/" target="_blank" rel="noopener">MPI scatter gather allgather</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>horovod</title>
      <link href="/2019/11/17/horovod/"/>
      <url>/2019/11/17/horovod/</url>
      
        <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/70603273" target="_blank" rel="noopener">horovod 知乎</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> DDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给ps-lite添加Angel中的psFunc</title>
      <link href="/2019/11/16/%E7%BB%99ps-lite%E6%B7%BB%E5%8A%A0Angel%E4%B8%AD%E7%9A%84psFunc/"/>
      <url>/2019/11/16/%E7%BB%99ps-lite%E6%B7%BB%E5%8A%A0Angel%E4%B8%AD%E7%9A%84psFunc/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>实验室项目想把ps设计的更好，要求借鉴Angel提供psFunc,以便后续能提供对一些传统ML算法的支持，包括GBDT,LDA等。一开始并不是很懂这个psFunc有什么用，看了一下Angel的文档，当然这个Angel也是实验室和腾讯合作搞出来的。</p><h2 id="psFunc"><a href="#psFunc" class="headerlink" title="psFunc"></a>psFunc</h2><p>psFunc是在sever端的一些自定义函数，最简单的ps只提供模型的存储功能，但是针对一些特定的算法我们需要一些优化，如果我们要对模型参数进行一些操作得到某个结果，如果ps只提供了最简单的pull功能，那我们就要把模型参数从ps上全部拉过来，然后在worker上计算得到结果。这样的做法网络通信开销很大，如果server端能够提供这样的功能，那worker发一个请求，server端执行计算返回一个结果数值就好了，这样网络通信开销会大幅度降低，毕竟server也是有计算能力的，浪费掉很可惜啊。这样的想法很直观。感觉优化提升应该也不错。如下是Angel的文档:<br><img src="/images/psFunc/ps.jpeg" alt title="psfunc"></p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bookstack.cn/read/angel/docs-design-psfFunc.md" target="_blank" rel="noopener">Angel 2.0 用户手册</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> DDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReduceScatter+Allgather</title>
      <link href="/2019/11/16/ReduceScatter-Allgather/"/>
      <url>/2019/11/16/ReduceScatter-Allgather/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Ring Allreduce架构也是一种常用的梯度同步架构，它的通信成本与gpu的数量无关。它是Allreduce算法的一种高效实现。目前常用的分布式深度学习的框架基本就是ps架构和Ring Allreduce架构。在这篇博客中，我会首先来回顾一下最简单的Allreduce算法的实现，然后是Ring Allreduce算法的实现，并给出baidu all-reduce的源码分析。</p><h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>Allreduce 是一种集合通信原语，它的规范的定义如下：</p><blockquote><p>AllReduce is an operation that reduces the target arrays in all processes to a single array and returns the resultant array to all processes.</p></blockquote><p>简单来说就是有很多个进程，每个进程都有一个目标数组，Allreduce要做的就是将所有进程中的数组收集起来做一个reduce操作成单个的数组，然后将这单个的数组重新发送给所有的进程。就是一个reduce+broadcast的操作。很容易理解，要实现Allreduce一个最简单的算法就是用一个process当master，其他的进程把自己的数组发送给master, master收集完后做一个reduce操作，然后再将结果数组发送给其余的所有进程，和ps架构一样。图示如下：</p><p><img src="/images/ReduceScatter+Allgather/master.png" alt title="simple implementation of Allreduce"></p><p>我们计算一下这种实现的通信量,假设数组的长度是N,总共有P个进程,那么第一步有P-1个进程将数组发送到master进程,然后master进程将reduce后的数组发送给P-1个进程，所以master总共的通信量是2(P-1)*N. 可以看到master的通信量和gpu的数量是线性关系的。而且master的带宽限制使得master成了一个瓶颈。</p><p>而Ring Allreduce作为Allreduce算法的一个高效实现，它消除了master的瓶颈，使得系统的通信成本和gpu的数量无关，是一个恒定值。在该算法中，所有的gpu排列成一个环，我们给gpu标号，从0~N-1.按照顺时针的方向，每个gpu会有一个左边的邻居和右边的邻居，每个迭代中，当前gpu从左邻居中接受数据，发送数据给右边的邻居.图示如下：<br><img src="/images/ReduceScatter+Allgather/RingAllreduce.png" alt title="ring allreduce"></p><p>我们来具体介绍算法流程:</p><p>首先，在每个gpu上，把长度为N的数组切分成P个chunks,P是进程的数量。<br><img src="/images/ReduceScatter+Allgather/split.png" alt title="split array"><br>接下来进行P-1次Scatter-Reduce迭代，第一次迭代，编号为n的gpu,将第n块发送给它的右邻居，从它的左邻居接收第n-1块。后面的每次迭代，每块gpu都将上一轮迭代接收到的块进行reduce操作后发送给它的右邻居。以下是第一次迭代，第二次迭代和最后一次迭代的图示：</p><p><img src="/images/ReduceScatter+Allgather/1.png" alt title="split array"><br><img src="/images/ReduceScatter+Allgather/2.png" alt title="split array"><br><img src="/images/ReduceScatter+Allgather/last.png" alt title="split array"></p><p>可以看到P-1次Reduce-Scatter迭代完成后，每个gpu都拥有最终结果的其中一块。我们需要把每个gpu中的这个块发送到其他gpu，这次每个gpu接收到块以后不是reduce操作，是直接覆盖对应块的内容即可。<br>方法是通过P-1次Allgather迭代，第一次迭代，第n个gpu发送第n+1个块接收第n个块.后续的迭代和Reduce-Scatter一样，也是发送上一轮迭代接收的到的块.下面是第一轮，第二轮以及最后的图示：</p><p><img src="/images/ReduceScatter+Allgather/11.png" alt title="split array"><br><img src="/images/ReduceScatter+Allgather/22.png" alt title="split array"><br><img src="/images/ReduceScatter+Allgather/last_gather.png" alt title="split array"></p><p>我们分析这个ring算法的总的通信量, 总共是2<em>(p-1)次迭代，每个迭代每块gpu都发送 N/P 的数据，所以每个gpu发送的数据量和接收的数据量都是 2</em>(P-1)N/P, 最后的结果与P无关。通过对比可以看到，ring allreduce算法的通信量更少而且与gpu数量无关，扩展性更好。</p><p>其实allreduce算法有很多种，还有 tree-allreduce等，像Rabit库中实现的应该是tree-allreduce, 后续可以补充。ring allreduce在通信上应该是最优的.</p><p>本篇博客中的所有图都截取自参考资料[5].</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>我们通过对baidu all-reduce源码的解读和应用来实践ring all-reduce算法.<br>baidu allreduce源码的层次结构如下：<br><img src="/images/ReduceScatter+Allgather/tree.png" alt title="tree"><br>可以看到源码的量很少，其中最关键的就是collectives.cu文件，实现了 Ring Allreduce和 Ring Allgather两个函数。下面我们来看一些help function,理解了这些help function,再看最重要的部分就都能理解了。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.jianshu.com/p/8c0e7edbefb9" target="_blank" rel="noopener">[1]Ring Allreduce</a><br><a href="https://blog.csdn.net/qq_35799003/article/details/85016537" target="_blank" rel="noopener">[2]All Reduce</a><br><a href="https://github.com/dmlc/rabit" target="_blank" rel="noopener">[3]Rabit</a><br><a href="https://github.com/baidu-research/baidu-allreduce" target="_blank" rel="noopener">[4]baidu all-reduce</a><br><a href="http://andrew.gibiansky.com/" target="_blank" rel="noopener">[5]Bringing HPC Techniques to Deep Learning</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> DDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bytescheduler在byteps中的实现</title>
      <link href="/2019/11/16/bytescheduler%E5%9C%A8byteps%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/11/16/bytescheduler%E5%9C%A8byteps%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cuda Stream</title>
      <link href="/2019/11/14/cuda-Stream/"/>
      <url>/2019/11/14/cuda-Stream/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python的with语句以及__enter__和__exit__</title>
      <link href="/2019/11/10/python%E7%9A%84with%E8%AF%AD%E5%8F%A5%E4%BB%A5%E5%8F%8A-enter-%E5%92%8C-exit/"/>
      <url>/2019/11/10/python%E7%9A%84with%E8%AF%AD%E5%8F%A5%E4%BB%A5%E5%8F%8A-enter-%E5%92%8C-exit/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想写一个DL的框架，前端想模仿tensorflow来写，看到 with tf.Graph().as_default, 就想看看Graph类如何定义，看到一个simpleflow的github项目，里面Graph的定义里有 <strong>enter</strong>和<strong>exit</strong>方法，不明白是什么意思就随手一查，反而让我知道了with语法的内部机制,算是一个比较大的收获。</p><h2 id><a href="#" class="headerlink" title=" "></a> </h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/lipijin/p/4460487.html" target="_blank" rel="noopener">python <strong>enter</strong> 与 <strong>exit</strong>的作用，以及与 with 语句的关系</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阅读论文《A Generic Communication Scheduler for Distributed DNN Training Acceleration》</title>
      <link href="/2019/10/28/%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87%E3%80%8AA-Generic-Communication-Scheduler-for-Distributed-DNN-Training-Acceleration%E3%80%8B/"/>
      <url>/2019/10/28/%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87%E3%80%8AA-Generic-Communication-Scheduler-for-Distributed-DNN-Training-Acceleration%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2>]]></content>
      
      
      
        <tags>
            
            <tag> DDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++ typename的用法</title>
      <link href="/2019/09/24/c-typename%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2019/09/24/c-typename%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>生产者消费者模型</title>
      <link href="/2019/09/19/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/09/19/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>生产者消费者模型是著名的线程同步模型，在实际的工业产品中都体现着这种模型。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>有一个大小为N的buffer,有多个线程对其进行操作，这些线程分为两类，分别是生产者和消费者，其中生产者生产数据并放到buffer里，消费者从buffer里取数据消费。如果buffer满了，那么生产者不能继续生产数据，如果buffer为空，那么消费者不能消费数据.以及同一时刻只能有一个线程来访问buffer.</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>使用一个mutex和两个semaphores(信号量)来实现</p><p>full = semaphore(0)<br>empty = semaphore(N)<br>mutex = 1</p><p>生产者:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">p(empty)</span><br><span class="line">p(mutex)  <span class="comment">// 多个线程之间的互斥，同一时刻只能有一个线程来访问buffer.</span></span><br><span class="line">produce()放入buffer</span><br><span class="line">v(mutex)</span><br><span class="line">v(full)</span><br></pre></td></tr></table></figure><p>消费者:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">p(full)</span><br><span class="line">p(mutex)</span><br><span class="line">从buffer取出,consume()</span><br><span class="line">v(mutex)</span><br><span class="line">v(empty)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以看到在一个进程中p都在v之前.在一个进程执行对一个信号量的p，在另一个进程执行对该信号量的v.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://pan.baidu.com/s/1CMgbNO-j7yv6Was72da7cg" target="_blank" rel="noopener">生产者消费者模型</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++11 std::thread</title>
      <link href="/2019/09/18/c-11-std-thread/"/>
      <url>/2019/09/18/c-11-std-thread/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>同步sgd/异步sgd</title>
      <link href="/2019/09/10/%E5%90%8C%E6%AD%A5sgd-%E5%BC%82%E6%AD%A5sgd/"/>
      <url>/2019/09/10/%E5%90%8C%E6%AD%A5sgd-%E5%BC%82%E6%AD%A5sgd/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读: Parameter Server for Distributed Machine Learning</title>
      <link href="/2019/08/30/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-Parameter-Server-for-Distributed-Machine-Learning/"/>
      <url>/2019/08/30/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-Parameter-Server-for-Distributed-Machine-Learning/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>参数同步架构和算法</title>
      <link href="/2019/08/30/%E5%8F%82%E6%95%B0%E5%90%8C%E6%AD%A5%E6%9E%B6%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
      <url>/2019/08/30/%E5%8F%82%E6%95%B0%E5%90%8C%E6%AD%A5%E6%9E%B6%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ring AllReduce</title>
      <link href="/2019/08/27/ring-AllReduce/"/>
      <url>/2019/08/27/ring-AllReduce/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>FM/DeepFM/NFM</title>
      <link href="/2019/08/22/FM-DeepFM-NFM/"/>
      <url>/2019/08/22/FM-DeepFM-NFM/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式爬虫+推荐</title>
      <link href="/2019/08/16/%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB-%E6%8E%A8%E8%8D%90/"/>
      <url>/2019/08/16/%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB-%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式文件系统</title>
      <link href="/2019/08/16/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/08/16/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GBDT</title>
      <link href="/2019/08/07/GBDT/"/>
      <url>/2019/08/07/GBDT/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>meta learning</title>
      <link href="/2019/08/05/meta-learning/"/>
      <url>/2019/08/05/meta-learning/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自动微分</title>
      <link href="/2019/08/05/%E8%87%AA%E5%8A%A8%E5%BE%AE%E5%88%86/"/>
      <url>/2019/08/05/%E8%87%AA%E5%8A%A8%E5%BE%AE%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="符号微分"><a href="#符号微分" class="headerlink" title="符号微分"></a>符号微分</h2><h2 id="数值微分"><a href="#数值微分" class="headerlink" title="数值微分"></a>数值微分</h2><h2 id="前向自动微分"><a href="#前向自动微分" class="headerlink" title="前向自动微分"></a>前向自动微分</h2><h2 id="反向自动微分"><a href="#反向自动微分" class="headerlink" title="反向自动微分"></a>反向自动微分</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/47592565" target="_blank" rel="noopener">一天实现自己的自动微分</a><br><a href="https://blog.csdn.net/aws3217150/article/details/70214422" target="_blank" rel="noopener">自动微分简介</a><br><a href="https://github.com/apachecn/hands-on-ml-zh/blob/master/docs/D.%E8%87%AA%E5%8A%A8%E5%BE%AE%E5%88%86.md" target="_blank" rel="noopener">tensorflow 自动微分</a><br><a href="https://blog.csdn.net/daniel_ustc/article/details/77133329" target="_blank" rel="noopener">c++ 实现自动微分</a><br><a href="https://en.wikipedia.org/wiki/Automatic_differentiation" target="_blank" rel="noopener">wikpedia automatic differentiation</a><br><a href="https://www.zhihu.com/question/48356514/answer/123290631" target="_blank" rel="noopener">自动微分法是如何用c++实现的</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> deep learning system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>beam search</title>
      <link href="/2019/08/05/beam-search/"/>
      <url>/2019/08/05/beam-search/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>隐马尔可夫模型</title>
      <link href="/2019/08/05/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/08/05/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RNN梯度消失和爆炸</title>
      <link href="/2019/08/04/RNN%E6%A2%AF%E5%BA%A6%E6%B6%88%E5%A4%B1%E5%92%8C%E7%88%86%E7%82%B8/"/>
      <url>/2019/08/04/RNN%E6%A2%AF%E5%BA%A6%E6%B6%88%E5%A4%B1%E5%92%8C%E7%88%86%E7%82%B8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> deep learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BPTT</title>
      <link href="/2019/08/04/BP%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD-BPTT/"/>
      <url>/2019/08/04/BP%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD-BPTT/</url>
      
        <content type="html"><![CDATA[<h2 id="BPTT-BackPropagation-Through-Time"><a href="#BPTT-BackPropagation-Through-Time" class="headerlink" title="BPTT (BackPropagation Through Time)"></a>BPTT (BackPropagation Through Time)</h2><p>用于循环神经网络的BP算法.首先我们回顾一下RNN,RNN的网络结构图如下：</p><p><img src="/images/BPTT/RNN.png" alt title="RNN"><br>标准RNN的数学表达式如下:</p><script type="math/tex; mode=display">s(t) = Ux(t)+Wh(t-1)+b</script><script type="math/tex; mode=display">h(t) = tanh(s(t))</script><script type="math/tex; mode=display">z(t) = Vh(t)+c</script><script type="math/tex; mode=display">\hat{y(t)} = softmax(z(t))</script><p>$ U $ , $ W $ , $ V $ 是待优化的参数. 上面的表达式可以和图对应,<strong>RNN网络的参数在所有时间步都是共享的</strong>.<br>我们参考材料[2]的记法，将公式细化如下:<br>首先我们计算s(t)的第j个元素,我们假设输入 $ x(t) $的维度是 $ l $ , 隐藏层的状态 $ h(t) $ 的维度是 $ m $ :</p><script type="math/tex; mode=display">s_j(t) = \sum_{i=1}^{l} {x_i(t)u_{ji} + \sum_{k=1}^{m} { h_k(t-1)wjk }}+b_j</script><p>下面我们计算 $ z(t) $ 的第j个元素:</p><script type="math/tex; mode=display">z_j(t) = \sum_{q=1}^{m} {h_q(t)v_{jq}}+c_j</script><p>因为每个时间步的输出都是一个概率向量，表示该时间步的词所属于各标签的概率分布，如果用one-hot向量表示真实标签$ y_t $，那么输出$ \hat{y_t} $和$ y_t $可以计算交叉熵损失$ E_t $, 公式如下：</p><script type="math/tex; mode=display">E_t = -{y_t}^T \ln( \hat{y_t})</script><script type="math/tex; mode=display">E = \sum_{t=1}^{T} {E_t}</script><p>我们要用损失函数 $ E $ 对 $ U $ , $ W $ , $ V $ 求偏导数，然后更新参数,我么使用sgd 算法所以每次更新使用一个样本.</p><p>我们拿出一个时间步的损失，并就该损失求$ U $ , $ W $ , $ V $ 的更新，结构图如下：<br><img src="/images/BPTT/model.png" alt title="model"><br>我们假设输出的概率分布的维度是 $ o $ , 并把时间维度 $ t $ 舍去, 那么:</p><script type="math/tex; mode=display">E_t = -{y_t}^T \ln( \hat{y_t})  = \sum_{k=1}^{o} { -y_k \ln \hat{y_k} }</script><script type="math/tex; mode=display">\frac{ \partial E_t }{ \partial \hat{y_k} } = - \frac{y_k}{ \hat{y_k} }</script><script type="math/tex; mode=display">\frac{ \partial \hat{y_k} }{ \partial z_j } = \begin{cases}\hat{y_j}(1- \hat{y_j} ) & \text{ k = j  }\\- \hat{y_k} { \hat{y_j }}& \text{ j != k }\end{cases}</script><p>综上：</p><script type="math/tex; mode=display">\frac{ \partial E_t }{ \partial z_j } = \sum_{k=1}^{o} { \frac{ \partial E_t}{ \partial \hat{y_k} } \frac{ \partial \hat{y_k} }{ \partial z_j } } = y_j - \hat{y_j}</script><script type="math/tex; mode=display">\frac{ \partial z_j  }{ \partial v_{jq}}  = h_q</script><script type="math/tex; mode=display">\frac{ \partial E_t }{ \partial v_{jq}} =  \frac{ \partial E_t }{ \partial z_j } \frac{ \partial z_j  }{ \partial v_{jq}} =( y_j - \hat{y_j} )h_q</script><p>根据上面的式子，我们能对矩阵v的所有元素进行更新.<br>下面我们计算 $ U $ 和 $ W $ 的更新式子:</p><script type="math/tex; mode=display">\frac{ \partial E_t }{ \partial h_q } = \sum_{j=1}^{o} {\frac{ \partial E_t}{ \partial z_j} \frac{ \partial z_j}{ \partial h_q} } = \sum_{j=1}^{o} {(y_j - \hat{y_j} )v_{jq}}</script><script type="math/tex; mode=display">\frac{ \partial E_t }{ \partial  s_q  } = \frac{ \partial E_t }{ \partial h_q }  \frac{ \partial h_q }{ \partial s_q } = [ \sum_{j=1}^{o} {(y_j - \hat{y_j} )v_{jq}} ](1- {tanh(s_q)}^2)</script><script type="math/tex; mode=display">\frac{ \partial E_t }{ \partial  u_{qi}  } = \frac{ \partial E_t }{ \partial  s_q  } \frac{ \partial s_q }{ \partial  u_{qi}  } = [ \sum_{j=1}^{o} {(y_j - \hat{y_j} )v_{jq}} ](1- {tanh(s_q)}^2) x_i</script><script type="math/tex; mode=display">\frac{ \partial E_t }{ \partial  w_{qk}  } = \frac{ \partial E_t }{ \partial  s_q  } \frac{ \partial s_q }{ \partial  w_{qk}  } = [ \sum_{j=1}^{o} {(y_j - \hat{y_j} )v_{jq}} ](1- {tanh(s_q)}^2) h_k(t-1)</script><h3 id="W更新"><a href="#W更新" class="headerlink" title="W更新"></a>W更新</h3><script type="math/tex; mode=display">\frac{ \partial E}{ \partial W} = \sum_{t=1}^{T} { \frac{ \partial E_t }{ \partial W }}</script><script type="math/tex; mode=display">\frac{ \partial E_t }{ \partial W } = \frac{ \partial E_t }{ \partial \hat{y_t}  } \frac{ \partial \hat{y_t} }{ \partial W  }</script><script type="math/tex; mode=display">\frac{ \partial E_t }{ \partial \hat{y_t}  } = - \frac{y_t}{ \hat{y_t}}</script><p>这里的除法是element-wise的.<br>然后是$ \frac{ \partial \hat{y_t} }{ \partial W  } $ ，<del>这是一个向量对一个矩阵求偏导</del></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/wacc/p/5341670.html" target="_blank" rel="noopener">BPTT blog</a><br><a href="https://pan.baidu.com/s/1BQkpjxfhDWhPnGy9E_h12w" target="_blank" rel="noopener">bptt</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> deep learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>simpledb(1)</title>
      <link href="/2019/08/04/simpledb-1/"/>
      <url>/2019/08/04/simpledb-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c++11之std::move</title>
      <link href="/2019/07/29/c-11%E4%B9%8Bstd-move/"/>
      <url>/2019/07/29/c-11%E4%B9%8Bstd-move/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c++11之多线程std::thread</title>
      <link href="/2019/07/29/c-11%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8Bstd-thread/"/>
      <url>/2019/07/29/c-11%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8Bstd-thread/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> c++11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlite architecture</title>
      <link href="/2019/07/29/sqlite-architecture/"/>
      <url>/2019/07/29/sqlite-architecture/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>database index</title>
      <link href="/2019/07/29/database-index/"/>
      <url>/2019/07/29/database-index/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B/B+ Tree</title>
      <link href="/2019/07/27/B-B-Tree/"/>
      <url>/2019/07/27/B-B-Tree/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习分布式训练</title>
      <link href="/2019/07/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%AD%E7%BB%83/"/>
      <url>/2019/07/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%AD%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<h2 id="并行模式"><a href="#并行模式" class="headerlink" title="并行模式"></a>并行模式</h2><h3 id="数据并行"><a href="#数据并行" class="headerlink" title="数据并行"></a>数据并行</h3><h3 id="模型并行"><a href="#模型并行" class="headerlink" title="模型并行"></a>模型并行</h3><h3 id="混合并行"><a href="#混合并行" class="headerlink" title="混合并行"></a>混合并行</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      
      
      
        <tags>
            
            <tag> DDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>architerture of sqlite</title>
      <link href="/2019/07/26/architerture-of-sqlite/"/>
      <url>/2019/07/26/architerture-of-sqlite/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sqlite源码剖析(1)</title>
      <link href="/2019/07/26/sqlite%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-1/"/>
      <url>/2019/07/26/sqlite%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>傅立叶变换及其加强版FFT</title>
      <link href="/2019/07/26/%E5%82%85%E7%AB%8B%E5%8F%B6%E5%8F%98%E6%8D%A2%E5%8F%8A%E5%85%B6%E5%8A%A0%E5%BC%BA%E7%89%88FFT/"/>
      <url>/2019/07/26/%E5%82%85%E7%AB%8B%E5%8F%B6%E5%8F%98%E6%8D%A2%E5%8F%8A%E5%85%B6%E5%8A%A0%E5%BC%BA%E7%89%88FFT/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>caffe中的卷积计算的实现im2col</title>
      <link href="/2019/07/26/caffe%E4%B8%AD%E7%9A%84%E5%8D%B7%E7%A7%AF%E8%AE%A1%E7%AE%97%E7%9A%84%E5%AE%9E%E7%8E%B0im2col/"/>
      <url>/2019/07/26/caffe%E4%B8%AD%E7%9A%84%E5%8D%B7%E7%A7%AF%E8%AE%A1%E7%AE%97%E7%9A%84%E5%AE%9E%E7%8E%B0im2col/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GPU内存层次</title>
      <link href="/2019/07/25/GPU%E5%86%85%E5%AD%98%E5%B1%82%E6%AC%A1/"/>
      <url>/2019/07/25/GPU%E5%86%85%E5%AD%98%E5%B1%82%E6%AC%A1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> CUDA Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>knowledge distillation</title>
      <link href="/2019/07/24/knowledge-distillation/"/>
      <url>/2019/07/24/knowledge-distillation/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cudnn实践</title>
      <link href="/2019/07/23/cudnn%E5%AE%9E%E8%B7%B5/"/>
      <url>/2019/07/23/cudnn%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>矩阵乘法优化cublas</title>
      <link href="/2019/07/23/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%E4%BC%98%E5%8C%96cublas/"/>
      <url>/2019/07/23/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%E4%BC%98%E5%8C%96cublas/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SIMD</title>
      <link href="/2019/07/23/intel%E5%90%91%E9%87%8F%E5%8C%96%E6%8C%87%E4%BB%A4/"/>
      <url>/2019/07/23/intel%E5%90%91%E9%87%8F%E5%8C%96%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="SIMD"><a href="#SIMD" class="headerlink" title="SIMD"></a>SIMD</h2><p><img src="/images/simd/simd_1.png" alt title="simd"></p><h2 id="向量化"><a href="#向量化" class="headerlink" title="向量化"></a>向量化</h2><p><img src="/images/simd/simd_2.png" alt title="向量化"></p>]]></content>
      
      
      
        <tags>
            
            <tag> parallel programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>model parallelism/data parallelism</title>
      <link href="/2019/07/23/model-parallelism-data-parallelism/"/>
      <url>/2019/07/23/model-parallelism-data-parallelism/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BSP/SSP/A-SGD</title>
      <link href="/2019/07/23/BSP-SSP-A-SGD/"/>
      <url>/2019/07/23/BSP-SSP-A-SGD/</url>
      
        <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/Angel-ML/angel/blob/master/docs/design/sync_controller.md" target="_blank" rel="noopener">Angel 异步控制</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> DDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BatchNormalization</title>
      <link href="/2019/07/23/BatchNormalization/"/>
      <url>/2019/07/23/BatchNormalization/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Dropout</title>
      <link href="/2019/07/23/Dropout/"/>
      <url>/2019/07/23/Dropout/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mixed precision</title>
      <link href="/2019/07/23/mixed-precision/"/>
      <url>/2019/07/23/mixed-precision/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>REVISITING DISTRIBUTED SYNCHRONOUS SGD</title>
      <link href="/2019/07/23/REVISITING-DISTRIBUTED-SYNCHRONOUS-SGD/"/>
      <url>/2019/07/23/REVISITING-DISTRIBUTED-SYNCHRONOUS-SGD/</url>
      
        <content type="html"><![CDATA[<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://pan.baidu.com/s/1exPQ5bdliOc4qtUrG7Wc2A" target="_blank" rel="noopener">revisiting distributed synchronous sgd</a><br><a href="https://pan.baidu.com/s/1KIhI2_I-kehMmKnyVozE_g" target="_blank" rel="noopener">DC-ASGD</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> distributed machine learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>caffe源码(1)</title>
      <link href="/2019/07/22/caffe%E6%BA%90%E7%A0%81-1/"/>
      <url>/2019/07/22/caffe%E6%BA%90%E7%A0%81-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> caffe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>词向量</title>
      <link href="/2019/07/20/%E8%AF%8D%E5%90%91%E9%87%8F/"/>
      <url>/2019/07/20/%E8%AF%8D%E5%90%91%E9%87%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>模型压缩</title>
      <link href="/2019/07/20/%E6%A8%A1%E5%9E%8B%E5%8E%8B%E7%BC%A9/"/>
      <url>/2019/07/20/%E6%A8%A1%E5%9E%8B%E5%8E%8B%E7%BC%A9/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bert</title>
      <link href="/2019/07/20/bert/"/>
      <url>/2019/07/20/bert/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>attention is all you need</title>
      <link href="/2019/07/20/attention-is-all-you-need/"/>
      <url>/2019/07/20/attention-is-all-you-need/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>各种激活函数总结</title>
      <link href="/2019/07/20/%E5%90%84%E7%A7%8D%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/"/>
      <url>/2019/07/20/%E5%90%84%E7%A7%8D%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sequence2sequence实现机器翻译</title>
      <link href="/2019/07/12/sequence2sequence%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/"/>
      <url>/2019/07/12/sequence2sequence%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bilstm+CRF实现命名实体识别</title>
      <link href="/2019/07/12/bilstm-CRF%E5%AE%9E%E7%8E%B0%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB/"/>
      <url>/2019/07/12/bilstm-CRF%E5%AE%9E%E7%8E%B0%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="BiLSTM"><a href="#BiLSTM" class="headerlink" title="BiLSTM"></a>BiLSTM</h2><h2 id="CRF"><a href="#CRF" class="headerlink" title="CRF"></a>CRF</h2><h2 id="Tensorflow-implementation"><a href="#Tensorflow-implementation" class="headerlink" title="Tensorflow implementation"></a>Tensorflow implementation</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://pan.baidu.com/s/1bReq4ygj7ZKUmZSUNdONEQ" target="_blank" rel="noopener">Bidirectional LSTM-CRF Models for Sequence Tagging</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++11之Deducing Types</title>
      <link href="/2019/07/12/c-11%E4%B9%8BDeducing-Types/"/>
      <url>/2019/07/12/c-11%E4%B9%8BDeducing-Types/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> c++11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CUDA in Actions</title>
      <link href="/2019/07/12/CUDA-in-Actions/"/>
      <url>/2019/07/12/CUDA-in-Actions/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&nbsp;&nbsp;之前我们用cuda实现了打印hello world以及向量相加. 这篇博客，我们来探究如何利用gpu的并行性. gpu的power就在于它的并行性.</p><h2 id="lt-lt-lt-…-gt-gt-gt-语法"><a href="#lt-lt-lt-…-gt-gt-gt-语法" class="headerlink" title="&lt;&lt;&lt;…&gt;&gt;&gt;语法"></a>&lt;&lt;&lt;…&gt;&gt;&gt;语法</h2><p>&nbsp;&nbsp;&lt;&lt;&lt;…&gt;&gt;&gt;是kernel函数执行的设置，比如用几个线程来执行核函数. cuda 将线程组织成线程块(thread block)，kernel可以启动很多线程块，并且把它们组织成grid数据结构(grid).<br>&nbsp;&nbsp;核函数启动设置的语法是<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt; M , T &gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;表示kernel函数执行启动了一个grid,这个grid有M个线程块(thread block),每个线程块有T个线程.</p><h3 id="threadIdx-x-blockDim-x-以及-blockIdx-x"><a href="#threadIdx-x-blockDim-x-以及-blockIdx-x" class="headerlink" title="threadIdx.x, blockDim.x 以及 blockIdx.x"></a>threadIdx.x, blockDim.x 以及 blockIdx.x</h3><p>&nbsp;&nbsp;cuda提供了内置变量来获取线程信息，这里我们使用两个. threadIdx.x 表示线程块中的线程编号(以0开始), blockIdx.x表示线程块中的线程数.因为可以获取线程信息，所以函数内部可以根据当前的线程来决定执行怎样的操作.比如向量相加，不同的线程计算不同区间的向量相加，先获取当前线程号，根据线程号确定向量相加的范围，执行计算.blockDim.x表示一个thread block的线程数量.</p><h2 id="并行计算-vector-addition"><a href="#并行计算-vector-addition" class="headerlink" title="并行计算 vector addition"></a>并行计算 vector addition</h2><p>假设一个线程块有256个线程</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__<span class="function">global__ <span class="keyword">void</span> <span class="title">vector_add</span><span class="params">(<span class="keyword">float</span> *out, <span class="keyword">float</span> *a, <span class="keyword">float</span> *b, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = threadIdx.x;</span><br><span class="line">    <span class="keyword">int</span> stride = blockDim.x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = index; i &lt; n; i += stride)&#123;</span><br><span class="line">        out[i] = a[i] + b[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码的想法可以用如下的图来说明:<br><img src="/images/CUDA_in_Actions/01_parallel_thread.png" alt title="向量相加"></p><p>不同线程写不同位置，不存在冲突，这里突然想起来，如果按照一个线程的写法但是开多个线程运行，是不是应该会冲突？？之后可以学习一下gpu线程的同步问题.</p><p>我们用nvprof来验证用1个线程和256个线程完成向量相加的执行情况，主要看执行时间：<br><img src="/images/CUDA_in_Actions/thread_block.png" alt title="对比图"></p><p>可以看到执行时间明显缩短了.现在的程序只开了一个thread block,我们尝试开启多个thread block.</p><h2 id="多个thread-block并行计算向量相加"><a href="#多个thread-block并行计算向量相加" class="headerlink" title="多个thread block并行计算向量相加"></a>多个thread block并行计算向量相加</h2><p>&nbsp;&nbsp;cuda提供了内置的变量来获取thread block的信息，包括block的编号(blockIdx.x)，一个grid有多少个blocks(gridDim.x).<br>&nbsp;&nbsp;使用多个grid来并行化向量相加的示意图如下所示:<br><img src="/images/CUDA_in_Actions/02_parallel_block.png" alt title="multithread"></p><p>&nbsp;&nbsp;想法就是每个block有256个thread,每个thread负责一个计算一个元素相加，然后总共有 N/256个thread block,因为N不一定是256的倍数，所以在核函数中还要判断index是否小于N..<br>这样每个元素都是同时计算的,进一步加大并行化.期望的执行时间也应该减少.</p><p>对应的程序如下：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__<span class="function">global__ <span class="keyword">void</span> <span class="title">vector_add</span><span class="params">(<span class="keyword">float</span> *out, <span class="keyword">float</span> *a, <span class="keyword">float</span> *b, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i = blockIdx.x*blockDim.x+threadIdx.x;</span><br><span class="line">   <span class="keyword">if</span>(i&lt;n)out[i] = a[i] + b[i];</span><br></pre></td></tr></table></figure></p><p>程序运行性能如下:<br><img src="/images/CUDA_in_Actions/multiblock.png" alt title="multiblock"></p><h2 id="性能比较"><a href="#性能比较" class="headerlink" title="性能比较"></a>性能比较</h2><p>N=700000</p><div class="table-container"><table><thead><tr><th>version</th><th>Execution Time(ms)</th><th>Speedup</th></tr></thead><tbody><tr><td>1 thread</td><td>977.26</td><td>1.00x</td></tr><tr><td>1 block</td><td>5.5417</td><td>176.35x </td></tr><tr><td>Multiple blocks</td><td>0.13274</td><td>7360.25x</td></tr></tbody></table></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇博客分别通过用一个thread block,每个thread block 256个线程和多个thread block，每个thread block 256个线程计算向量相加来展示如何使用gpu来并行计算.其中强调了三个概念 grid , threadblock以及 thread….接下来我们学习一个gpu的架构.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cuda-tutorial.readthedocs.io/en/latest/tutorials/tutorial02/" target="_blank" rel="noopener">Tutorial 02 CUDA in Actions</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CUDA Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LSTM,RNN,Bi-LSTM,On-LSTM</title>
      <link href="/2019/07/12/LSTM-RNN-Bi-LSTM-On-LSTM/"/>
      <url>/2019/07/12/LSTM-RNN-Bi-LSTM-On-LSTM/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CUDA线程层次-从硬件和软件角度</title>
      <link href="/2019/07/10/GPU%E6%9E%B6%E6%9E%84/"/>
      <url>/2019/07/10/GPU%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="Streaming-Multiprocessors"><a href="#Streaming-Multiprocessors" class="headerlink" title="Streaming Multiprocessors"></a>Streaming Multiprocessors</h2><p>GPU是由流多处理器构成的，每个SM内部有多个core, 每个core跑一个thread.</p><blockquote><p>The idea is that the CPU spawns a thread per element, and the GPU then executes those threads.Not all of the thousands or millions of threads actually run in parallel, but many do.Specifically, an NVIDIA GPU contains several largely independent processors called “Streaming Multiprocessors” (SMs), each SM hosts several “cores”, and each “core” runs a thread.For instance, Fermi has up to 16 SMs with 32 cores per SM – so up to 512 thread can run in parallel.</p><p>All threads running on the cores of an SM at a given cycle are executing the same instruction – hence Single Instruction, Multiple Threads. However, each thread has its own registers, so these instructions process different data.</p></blockquote><p><img src="/images/gpu_arch/SMs.png" alt title="SMs"><br>&nbsp;&nbsp;可以看到一个thread block跑在一个SM上面. 一个block执行完毕，SM可以调度另一个block执行，在一个SM上,block的执行是顺序的.</p><p><img src="/images/gpu_arch/inside_1.png" alt title="inside a gpu"><br>&nbsp;&nbsp;一个SM只有一个指令单元，SM内的所有thread共享这个指令单元.</p><h3 id="Warps"><a href="#Warps" class="headerlink" title="Warps"></a>Warps</h3><p>&nbsp;&nbsp;一个thread block在一个SM上执行,block中的thread可以继续分成warp,一个warp包括32个线程.<strong>warp是SM调度运行的基本单元</strong>,一个warp中的所有线程执行相同的指令.<strong>任意时刻，SM中只会有一个warp在运行，其余的warp都处于就绪等其他状态</strong>. 不同架构的gpu一个SM包含不同数量的cuda核心，Turing架构的一个SM包含128个cuda core,也就是4个warp. SM中有硬件warp scheduler，用来调度warp运行. </p><h2 id="thread-block-organization"><a href="#thread-block-organization" class="headerlink" title="thread block organization"></a>thread block organization</h2><p><img src="/images/gpu_arch/thread_block_org.png" alt title="thread block organization"><br>&nbsp;&nbsp;grid由多个blocks组成，每个kernel function的调用都会create一个grid,所以&lt;&lt;&lt;…&gt;&gt;&gt;语法指定的是block的数量和每个block的线程数量,因为这个kernel函数只会在一个grid上运行.</p><p><img src="/images/gpu_arch/thread_cooperate.png" alt title="thread cooperate"><br>&nbsp;&nbsp;同一个block内的所有thread可以合作(因为有个Shared Memory??)，不同block的thread不可以合作.</p><p>&nbsp;&nbsp;从上图中可以看到每个block都有一个Shared Memory,是所有block中的thread所共享的,每个thread有自己的Local Memory和Registers. 一个Grid中的所有blocks共享Global Memory, Constant Memory以及Texture Memory. 所有blocks中的thread都共享这三种Memory,内存层次会在后序的博客中进行总结.</p><h2 id="uint3和Dim3-数据结构"><a href="#uint3和Dim3-数据结构" class="headerlink" title="uint3和Dim3 数据结构"></a>uint3和Dim3 数据结构</h2><h3 id="uint3"><a href="#uint3" class="headerlink" title="uint3"></a>uint3</h3><p><img src="/images/gpu_arch/uint3.png" alt title="uint3"></p><h3 id="dim3"><a href="#dim3" class="headerlink" title="dim3"></a>dim3</h3><p><img src="/images/gpu_arch/dim3.png" alt title="dim3"></p><h3 id="block-and-grid-dimensions"><a href="#block-and-grid-dimensions" class="headerlink" title="block and grid dimensions"></a>block and grid dimensions</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cuda_runtime.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__<span class="function">global__ <span class="keyword">void</span> <span class="title">checkIndex</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"threadIdx:(%d, %d, %d) blockIdx:(%d, %d, %d) blockDim:(%d, %d, %d) "</span></span><br><span class="line"><span class="string">"gridDim:(%d, %d, %d)\n"</span>, threadIdx.x, threadIdx.y, threadIdx.z, blockIdx.x, blockIdx.y, blockIdx.z, blockDim.x, blockDim.y, blockDim.z, gridDim.x,gridDim.y,gridDim.z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123; <span class="comment">// define total data element</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nElem = <span class="number">6</span>;</span><br><span class="line"><span class="comment">// define grid and block structure</span></span><br><span class="line"></span><br><span class="line"><span class="function">dim3 <span class="title">block</span> <span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="function">dim3 <span class="title">grid</span> <span class="params">((nElem+block.x<span class="number">-1</span>)/block.x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// check grid and block dimension from host side</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"grid.x %d grid.y %d grid.z %d\n"</span>,grid.x, grid.y, grid.z);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"block.x %d block.y %d block.z %d\n"</span>,block.x, block.y, block.z);</span><br><span class="line"></span><br><span class="line"><span class="comment">// check grid and block dimension from device side </span></span><br><span class="line">checkIndex&lt;&lt;&lt;grid, block&gt;&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// reset device before you leave</span></span><br><span class="line">cudaDeviceReset();</span><br><span class="line"><span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;可以看到上面的程序定义了两个dim3类型的变量block和grid. 因为nElem的值是6,所以grid的x分量是2,因为这两个变量都只是指定了x分量，所以其余的分量都初始化为1.目前来看&lt;&lt;…&gt;&gt;&gt;传入的两个参数都是dim3类型的，之前的程序中直接传入int类型的,它应该会转换成dim3类型的.<br>&nbsp;&nbsp;<strong>一个很直观的想法是可以把一个grid想像成一个三维的直角坐标系，然后一个block就是坐标系中的一个点,如果指定gridDim的x,y,z分别为2,3,4那么就有24个block,每个block可以用一个三维坐标来表示,同理可以可以把一个block想象成一个直角坐标系，thread也是其中的点.</strong></p><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/images/gpu_arch/result.png" alt title="result.png"></p><h3 id="cudaDeviceReset"><a href="#cudaDeviceReset" class="headerlink" title="cudaDeviceReset"></a>cudaDeviceReset</h3><p><img src="/images/gpu_arch/cudaDeviceRest.png" alt title="cudaDeviceRest"><br>可以看到这个函数是用来<strong>销毁一个CUDA的上下文的</strong>. It will reset the device immediately.虽然它表现上具有同步的功能，但是靠这个函数来同步是不安全的，所以建议如果是想同步的话，使用cudaDeviceSynchronize或者cudaMemcpy.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&nbsp;&nbsp;这篇博客总结了cuda线程的组织层次，从逻辑上讲一个kernel launch启动一个grid，可以用&lt;&lt;&lt;…&gt;&gt;&gt;语法设置gridDim和blockDim，从3个维度上进行设置. 一个grid包含多个block，这就是线程的两个层次的组织结构. 从硬件角度来讲，gpu的计算核心是多个SMs（streaming multiprocessors)，一个block在一个SM上运行，SM内部包含多个cuda core(不同的gpu架构的数目不同，Turing包含128个),32个cuda core构成一个warp.任意时刻一个SM中只会有一个warp处于活跃状态，其他的warp处于就绪或者挂起状态，从这点来看, SM非常类似于cpu中的core.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://pan.baidu.com/s/1AveSDmaRpR6ZyVisNTHm1A" target="_blank" rel="noopener">Programming Massively Parallel Processors</a><br><a href="https://stackoverflow.com/questions/36012289/what-is-the-role-of-cudadevicereset-in-cuda" target="_blank" rel="noopener">What is the role of cudaDeviceReset() in Cuda</a><br><a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#scalable-programming-model" target="_blank" rel="noopener">CUDA C Programming Guide</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CUDA Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CUDA Hello World</title>
      <link href="/2019/07/09/CUDA-Hello-World/"/>
      <url>/2019/07/09/CUDA-Hello-World/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&nbsp;&nbsp;第一次尝试编写CUDA C程序，主要是和以后的希望从事的方向有关，想从事大规模机器学习和深度学习系统的开发，CUDA是不可避免的需要掌握的并行计算的框架. 正好实验室有gpu服务器，趁着暑假来学习一波CUDA编程.<br>&nbsp;&nbsp;CUDA是NVIDIA推出的运算平台，是一种并行计算的架构，使用GPU来进行通用计算.</p><h2 id="编译CUDA程序的流程"><a href="#编译CUDA程序的流程" class="headerlink" title="编译CUDA程序的流程"></a>编译CUDA程序的流程</h2><p>&nbsp;&nbsp;编译一个CUDA程序和C程序一样，CUDA程序的编译器是nvcc, CUDA程序文件的后缀是.cu. 开设我们有一个CUDA程序文件，命名为hello.cu, 那么我们用nvcc将它编译为可执行文件的命令如下:</p><p><code>nvcc hello.cu -o hello</code></p><h2 id="CUDA-Hello-World"><a href="#CUDA-Hello-World" class="headerlink" title="CUDA Hello World"></a>CUDA Hello World</h2><p>&nbsp;&nbsp;学习任何程序设计语言的入门都是打印Hello World.CUDA程序也不例外， 下面我们以打印Hello World为例来解释CUDA程序的要素.</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__<span class="function">global__ <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"hello world from GPU\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"hello world from CPU\n"</span>);</span><br><span class="line">  hello&lt;&lt;&lt;<span class="number">1</span>, <span class="number">10</span>&gt;&gt;&gt;();</span><br><span class="line">  cudaDeviceSynchronize();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们用与之功能相近的普通C程序作为对比<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    hello();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到cuda程序相对于普通的c程序，有几点不同:</p><h3 id="global-限定符"><a href="#global-限定符" class="headerlink" title="__global__ 限定符"></a>__global__ 限定符</h3><p>&nbsp;&nbsp;在cuda程序中，cpu和gpu都用来做计算。我们把cpu叫做host，gpu叫做device. cpu和gpu拥有各自的存储空间。通常我们在cpu上顺序执行代码，在gpu上进行并行计算(Typically, we run serial workload on CPU and offload parallel computation to GPUs).<br>&nbsp;&nbsp;__global__限定符表示hello函数是在gpu上执行的，是device代码,而且<strong>被该修饰符修饰的函数可以被host上的代码调用</strong>(这一点很重要，之后我们会看到，有的限定符表示只能被device代码或者只能被host代码调用)，我们的例子里hello函数就是被host上的main函数调用的,这样的函数也叫”kernels”. <strong>A kernel function must have a void return type(核函数的返回类型必须是void)</strong></p><h3 id="lt-lt-lt-…-gt-gt-gt-语法"><a href="#lt-lt-lt-…-gt-gt-gt-语法" class="headerlink" title="&lt;&lt;&lt;…&gt;&gt;&gt; 语法"></a>&lt;&lt;&lt;…&gt;&gt;&gt; 语法</h3><p>&nbsp;&nbsp;当我们调用kernel的时候，它的执行的配置是通过&lt;&lt;&lt;…&gt;&gt;&gt;语法提供的，所谓的配置包括执行这个kernel用几个线程块，每个线程块开几个线程（这个涉及到gpu的结构）.比如上面的例子中，<code>hello&lt;&lt;&lt;1, 10&gt;&gt;&gt;();</code>. 在cuda中，这个叫做”kernel launch”(核启动). 具体参数之后的博客来说明.</p><h3 id="cudaDeviceSynchronize"><a href="#cudaDeviceSynchronize" class="headerlink" title="cudaDeviceSynchronize"></a>cudaDeviceSynchronize</h3><p>&nbsp;&nbsp; a kernel launch is asynchronous.因为kernel launch是异步执行的，当执行到device code的时候，在gpu上开启进程的时候，程序控制权就会回到cpu，不管gpu上的程序是否执行完毕。在我们的cuda程序中，如果没有cudaDeviceSynchronize函数，我们的程序就结束退出了，这样的话gpu端打印的hello world就不能打印到标准输出了. 而有了cudaDeviceSynchronize，cpu端的程序就会等device上的程序执行完后才退出，所以cudaDeviceSynchronize函数会阻塞直到device上的代码执行完毕.</p><h2 id="Vector-Addition"><a href="#Vector-Addition" class="headerlink" title="Vector Addition"></a>Vector Addition</h2><p>&nbsp;&nbsp;下面我们来看使用gpu进行向量相加运算的代码. 首先是使用cpu进行运算的代码：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10000000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vector_add</span><span class="params">(<span class="keyword">float</span> *out, <span class="keyword">float</span> *a, <span class="keyword">float</span> *b, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        out[i] = a[i] + b[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> *a, *b, *out; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate memory</span></span><br><span class="line">    a   = (<span class="keyword">float</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">float</span>) * N);</span><br><span class="line">    b   = (<span class="keyword">float</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">float</span>) * N);</span><br><span class="line">    out = (<span class="keyword">float</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">float</span>) * N);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize array</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        a[i] = <span class="number">1.0f</span>; b[i] = <span class="number">2.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Main function</span></span><br><span class="line">    vector_add(out, a, b, N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面我们把向量相加的部分放到gpu上进行并行运算:<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__<span class="function">global__ <span class="keyword">void</span> <span class="title">vector_add</span><span class="params">(<span class="keyword">float</span> *out, <span class="keyword">float</span> *a, <span class="keyword">float</span> *b, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        out[i] = a[i] + b[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> *a, *b, *out;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate memory</span></span><br><span class="line">    a   = (<span class="keyword">float</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">float</span>) * N);</span><br><span class="line">    b   = (<span class="keyword">float</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">float</span>) * N);</span><br><span class="line">    out = (<span class="keyword">float</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">float</span>) * N);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize array</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        a[i] = <span class="number">1.0f</span>; b[i] = <span class="number">2.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> *d_a;</span><br><span class="line">    <span class="keyword">float</span> *d_b;</span><br><span class="line">    <span class="keyword">float</span> *d_out;</span><br><span class="line"></span><br><span class="line">    cudaMalloc((<span class="keyword">void</span>**)&amp;d_a, <span class="keyword">sizeof</span>(<span class="keyword">float</span>) * N);</span><br><span class="line">    cudaMalloc((<span class="keyword">void</span>**)&amp;d_b, <span class="keyword">sizeof</span>(<span class="keyword">float</span>) * N);</span><br><span class="line">    cudaMalloc((<span class="keyword">void</span>**)&amp;d_out, <span class="keyword">sizeof</span>(<span class="keyword">float</span>) * N);</span><br><span class="line">    cudaMemcpy(d_a, a, <span class="keyword">sizeof</span>(<span class="keyword">float</span>) * N, cudaMemcpyHostToDevice);</span><br><span class="line">    cudaMemcpy(d_b, b, <span class="keyword">sizeof</span>(<span class="keyword">float</span>) * N, cudaMemcpyHostToDevice);</span><br><span class="line">    cudaMemcpy(d_out, out, <span class="keyword">sizeof</span>(<span class="keyword">float</span>) * N, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Main function</span></span><br><span class="line">    vector_add&lt;&lt;&lt;<span class="number">1</span>,<span class="number">10</span>&gt;&gt;&gt;(d_out, d_a, d_b, N);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cudaMemcpy(a, d_a, sizeof(float) * N, cudaMemcpyDeviceToHost);</span></span><br><span class="line">    <span class="comment">//cudaMemcpy(b, d_b, sizeof(float) * N, cudaMemcpyDeviceToHost);</span></span><br><span class="line">    cudaMemcpy(out, d_out, <span class="keyword">sizeof</span>(<span class="keyword">float</span>) * N, cudaMemcpyDeviceToHost);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; N;i++)&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"%f\n"</span>,out[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"end!!!!"</span>);</span><br><span class="line">    cudaFree(d_a);</span><br><span class="line">    cudaFree(d_b);</span><br><span class="line">    cudaFree(d_out);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line">    <span class="built_in">free</span>(out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;可能一开始，我们会向hello world程序一样，给vector_add函数添加__global__修饰符.然后在main函数中调用vector_add函数的地方添加&lt;&lt;&lt;…&gt;&gt;&gt;. 这样以后我们编译运行程序但是发现程序的执行结果和我们预想的不一样. 是什么原因导致的呢？<br>&nbsp;&nbsp;原因是cpu和gpu是各自拥有自己的存储空间,cpu无法直接获取gpu存储上的内容，gpu也无法直接获取到cpu存储上的内容. 在 cuda的术语里, cpu的存储叫做host memory, gpu的存储叫做device memory. 指向cpu内存的指针叫做host pointer, 指向gpu内存的指针叫做device pointer. 如果要让gpu能够获取到数据，那么数据必须在device memory上，cuda提供了分配device memory和在host和device之间进行数据迁移的api,cuda 程序的一个常见的流程如下:</p><ul><li>分配host memory并初始化host上的数据</li><li>分配device memory(cudaMalloc)</li><li>将kernel函数要用的数据从host迁移到device上(cudaMemcpy)</li><li>执行kernel函数</li><li>将kernel函数的输出从device迁移到host上(cudaMemcpy)</li></ul><p>vec_add在gpu上运行，而out,a,b这三个向量，传入的是cpu上的地址空间，因此结果和我们预期的不一样. 这里还有个疑问，那为啥程序不报错呢，传入的是cpu上的存储地址.核函数内部居然不报错？</p><p>这个程序相比于前面的hello world程序有很多新的函数需要解释：</p><h3 id="cudaMalloc和cudaFree"><a href="#cudaMalloc和cudaFree" class="headerlink" title="cudaMalloc和cudaFree"></a>cudaMalloc和cudaFree</h3><p>&nbsp;&nbsp;这两个函数类似于c语言中的malloc和free函数，只不过这两个函数是在device memory上分配空间, 他们的函数原型如下：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cudaMalloc(<span class="keyword">void</span> **devPtr, <span class="keyword">size_t</span> count);</span><br><span class="line">cudaFree(<span class="keyword">void</span> *devPtr);</span><br></pre></td></tr></table></figure></p><p>cudaMalloc函数在device memory上分配size为count的空间，然后让devPtr指向分配的空间. 而 cudaFree将devPtr指向的空间给free了.</p><h3 id="cudaMemcpy"><a href="#cudaMemcpy" class="headerlink" title="cudaMemcpy"></a>cudaMemcpy</h3><p>&nbsp;&nbsp;cudaMemcpy函数用来在host和device之间传递数据，和c中的memcpy函数很像. 语法如下：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cudaMemcpy(<span class="keyword">void</span> *dst, <span class="keyword">void</span> *src, <span class="keyword">size_t</span> count, cudaMemcpyKind kind)</span><br></pre></td></tr></table></figure></p><p>这个函数将size为count的存储从src复制到dst,kind指示复制的方向，最常用的值是cudaMemcpyHostToDevice 以及 cudaMemcpyDeviceToHost，分别表示从host复制到device以及从device复制到host.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cuda-tutorial.readthedocs.io/en/latest/tutorials/tutorial01/" target="_blank" rel="noopener">Tutorial 01:Say Hello to CUDA</a><br><a href="https://stackoverflow.com/questions/19193468/why-do-we-need-cudadevicesynchronize-in-kernels-with-device-printf" target="_blank" rel="noopener">why do we need cudaDeviceSynchronize</a><br><a href="https://stackoverflow.com/questions/25332476/cudadevicesynchronize-and-performing-sequential-work?noredirect=1" target="_blank" rel="noopener">cudaDeviceSynchronize and performing sequential work</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CUDA Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑回归交叉熵损失函数梯度推导</title>
      <link href="/2019/07/06/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%BA%A4%E5%8F%89%E7%86%B5%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E6%A2%AF%E5%BA%A6%E6%8E%A8%E5%AF%BC/"/>
      <url>/2019/07/06/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%BA%A4%E5%8F%89%E7%86%B5%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E6%A2%AF%E5%BA%A6%E6%8E%A8%E5%AF%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="what-is-softmax"><a href="#what-is-softmax" class="headerlink" title="what is softmax"></a>what is softmax</h2><p>&nbsp;&nbsp;softmax通常用于神经网络的输出层，用于多分类任务, 为每个类别产生一个概率，公式如下:</p><script type="math/tex; mode=display">softmax(\overrightarrow{z})=\overrightarrow{s}</script><script type="math/tex; mode=display">\overrightarrow{z} \in R^n , \overrightarrow{s} \in R^n</script><script type="math/tex; mode=display">s_i = \frac{e^{z_i}}{ \sum_{k=1}^{n} {e^{z_k}} }</script><h2 id="what-is-logistic-regression"><a href="#what-is-logistic-regression" class="headerlink" title="what is logistic regression"></a>what is logistic regression</h2><p>&nbsp;&nbsp;逻辑回归是一个分类模型,假设输入$ \overrightarrow{x} \in R^n $, 模型参数$ \overrightarrow{w} \in R^n $, $ b \in R $ ,真实标签$ y \in \{0,1\} $ ,模型的预测输出是$ \hat{y} \in R $ 表示模型预测该实例为1的概率:</p><script type="math/tex; mode=display">P(Y=1|x) =  \hat{y} = sigmoid(w*x+b) = \frac{1}{1+e^{-(w*x+b)}} =\frac{e^{w*x+b}}{1+e^{w*x+b}}</script><p>从而:</p><script type="math/tex; mode=display">P(Y=0|x) = \frac{1}{1+e^{w*x+b}}</script><h2 id="sigmoid损失函数"><a href="#sigmoid损失函数" class="headerlink" title="sigmoid损失函数"></a>sigmoid损失函数</h2><p>&nbsp;&nbsp;sigmoid损失函数的公式和形状如下，它能将输入的范围转化到[0,1]之间,作为概率值.</p><script type="math/tex; mode=display">sigmoid(z) = \frac{1}{1+e^{-z}}</script><p><img src="/images/cross_entropy/sigmoid.png" alt title="sigmoid"></p><h2 id="极大似然估计"><a href="#极大似然估计" class="headerlink" title="极大似然估计"></a>极大似然估计</h2><p>&nbsp;&nbsp;极大似然估计是一种模型参数的估计方法，是频率学派的方法（另一个是贝叶斯学派，它们的参数估计方法是最大后验概率估计,两者的区别在于极大似然估计假设模型参数是一个固定值而最大后验概率估计假设模型参数也服从一定的分布，称为先验分布). 极大似然估计假设模型的参数是$ \Theta $,那么我们观察到的数据可以表示成参数的函数$ f(xi|\Theta) $,一般我们是有一个数据集，根据这个数据集合来估计模型参数，那么使得这个数据集合被我们观察到的概率是</p><script type="math/tex; mode=display">f(x_1,x_2,x_3,...x_n|\Theta)</script><p>因为数据集的数据是独立同分布的，所以下面的式子成立:</p><script type="math/tex; mode=display">f(x_1,x_2,x_3,...x_n|\Theta) = \prod_{i=1}^{n} {f(x_i|\Theta)}</script><p>上面的式子就是似然函数，它是一个关于参数$ \Theta $的函数,而我们要选取使得该似然函数取得最大值的参数，这就是极大似然估计,也就是选取参数使得我们观察到的结果的可能性最大.</p><h2 id="逻辑回归的损失函数推导"><a href="#逻辑回归的损失函数推导" class="headerlink" title="逻辑回归的损失函数推导"></a>逻辑回归的损失函数推导</h2><p>&nbsp;&nbsp;逻辑回归的参数估计可以采用极大似然法，似然函数如下：</p><script type="math/tex; mode=display">\prod_{i=1}^{n} {P(Y=1|x)^{y_i}P(Y=0|x)^{1-y_i} } = \prod_{i=1}^{n} {\hat{y_i}^{y_i}(1-\hat{y_i})^{1-y_i}}</script><p>我们使用负对数似然，对数函数不改变单调性，取负数使得该值大于0，那么损失函数如下：</p><script type="math/tex; mode=display">L = - \ln( \prod_{i=1}^{n} {\hat{y_i}^{y_i}(1-\hat{y_i})^{1-y_i}} ) = - \sum_{i=1}^{n} {y_i\ln\hat{y_i}+(1-y_i)\ln(1-\hat{y_i})}</script><p>我们采用梯度下降法sgd来求解模型参书$ w $, $ b $:</p><script type="math/tex; mode=display">\frac{\partial L}{\partial w} = \sum_{i=1}^{n} {\frac{\partial L}{\partial \hat{y_i}} \frac{\partial \hat{y_i}}{\partial w}}</script><script type="math/tex; mode=display">\frac{\partial L}{\partial \hat{y_i} }  = - [ y_i \frac{\partial \ln\hat{y_i}}{\partial \hat{y_i}}+(1-y_i) \frac{\partial \ln(1- \hat{y_i})}{\partial \hat{y_i}} ] = - [ y_i \frac{1}{ \hat{y_i} } +(1-y_i) \frac{-1}{1- \hat{y_i}} ]  = - \frac{y_i - \hat{y_i} }{ \hat{y_i} (1- \hat{y_i})}</script><script type="math/tex; mode=display">\frac{ \partial \hat{y_i} }{ \partial w} = \hat{y_i}(1- \hat{y_i} ) x_i</script><p>综上:</p><script type="math/tex; mode=display">\frac{\partial L}{\partial w} = \sum_{i=1}^{n} {\frac{\partial L}{\partial \hat{y_i}} \frac{\partial \hat{y_i}}{\partial w}} = - \sum_{i=1}^{n} {(y_i - \hat{y_i})x_i }</script><p>$ w $的更新公式为:</p><script type="math/tex; mode=display">w = w + \eta \sum_{i=1}^{n}{(y_i- \hat{y_i})x_i }</script><p>同理, $ b $的梯度如下:</p><script type="math/tex; mode=display">\frac{\partial L}{\partial b} = \sum_{i=1}^{n} {\frac{\partial L}{\partial \hat{y_i}} \frac{\partial \hat{y_i}}{\partial b}} = - \sum_{i=1}^{n} {(y_i - \hat{y_i}) }</script><p>b的更新公式如下:</p><script type="math/tex; mode=display">b = b + \eta \sum_{i=1}^{n}{(y_i- \hat{y_i}) }</script><h2 id="交叉熵损失函数以及softmax函数的梯度推导"><a href="#交叉熵损失函数以及softmax函数的梯度推导" class="headerlink" title="交叉熵损失函数以及softmax函数的梯度推导"></a>交叉熵损失函数以及softmax函数的梯度推导</h2><p>&nbsp;&nbsp;交叉熵用来衡量两个分布之间的距离,假设两个分布$ p $和$ q $,交叉熵的计算公式如下：</p><script type="math/tex; mode=display">H(p,q) = \sum_{i=1}^{n} {p_i \log \frac{1}{q_i}} = \sum_{i=1}^{n} {- p_i \log q_i}</script><p>&nbsp;&nbsp;softmax的输出是一个概率分布，而真实标签的one-hot向量也是一个概率分布，真实类别的概率为1，其余类别的概率是0，所以用交叉熵来衡量两个分布之间的距离作为损失函数是合适的，其实该损失函数也可以使用极大似然估计推导出来，下面是推导过程:</p><script type="math/tex; mode=display">L = - \ln(\prod_{i=1}^{n} {\prod_{j=1}^{c} { \hat{y_{ij}}^{y_{ij}}} }) = \sum_{i=1}^{n} { [\sum_{j=1}^{c} {-y_{ij} \ln \hat{y_{ij}}} ] }</script><p>其实数据集的损失是每个数据点的损失之和，[]内部就是交叉熵，下面我们推导损失函数的梯度，首先我们假设全连接中$ z_{ij} = w_j * x_i + b_j  $ , 这里的 $ wj $ 表示所有与输出层的第$ j $个神经元连接的权值，这些权值构成一个向量:</p><script type="math/tex; mode=display">\frac{\partial L}{\partial w_j } = \sum_{i=1}^{n} {\frac{ \partial L }{ \partial z_{ij} } \frac{\partial z_{ij} }{\partial w_j }}</script><script type="math/tex; mode=display">\frac{ \partial L }{ \partial z_{ij} } = \sum_{k=1}^{c} { \frac{ \partial L}{ \partial \hat{y_{ik}} } \frac{ \partial \hat{y_{ik}}}{\partial z_{ij}} }</script><script type="math/tex; mode=display">\frac{\partial L }{\partial \hat{y_{ik}}} = \frac{ \partial [ -y_{ik} \ln \hat{y_{ik}}] }{ \partial \hat{y_{ik}}}= \frac{-y_{ik}}{ \hat{y_{ik}}}</script><p>下面得分两种情况考虑:<br>如果 $ k=j  $,</p><script type="math/tex; mode=display">\frac{ \partial \hat{y_{ik}}}{\partial z_{ij}}  = \frac{ \partial \frac{e^{z_{ij}}}{ \sum_{q=1}^{c} {e^{z_{iq}}}} }{ \partial z_{ij} } = \frac{ e^{z_{ij}} \sum_{q=1}^{c}{ e^{z_{iq}}} - e^{z_{ij}} e^{z_{ij}}  }{ [ \sum_{q=1}^{c} {e^{z_{iq}}} ]^{2} } = \hat{y_{ij}} (1- \hat{y_{ij}} )</script><p>如果 $ k \ne j $,</p><script type="math/tex; mode=display">\frac{ \partial \hat{y_{ik}}}{\partial z_{ij}} =  \frac{ \partial \frac{e^{z_{ik}}}{ \sum_{q=1}^{c} {e^{z_{iq}}}} }{ \partial z_{ij} } = \frac{ 0- e^{z_{ik}} e^{z_{ij}} }{ [ \sum_{q=1}^{c} {e^{z_{iq}}} ]^{2} } = - \hat{y_{ik}} \hat{y_{ij}}</script><p>将上面的两个式子综合一下，得到如下的式子：</p><script type="math/tex; mode=display">\frac{ \partial L }{ \partial z_{ij} } = - y_{ij} (1- \hat{ y_{ij} })  + \sum_{k \ne j}^{c}{ y_{ik} \hat{y_{ij}} } = -y_{ij} + \hat{y_{ij}} \sum_{q=1}^{c} {y_{ik}} = \hat{ y_{ij}} -y_{ij}</script><p>因为:</p><script type="math/tex; mode=display">\frac{\partial z_{ij}}{ \partial w_j } = x_i</script><script type="math/tex; mode=display">\frac{\partial z_{ij}}{ \partial b_j } = 1</script><p>综上,$ w_j $的更新公式如下：</p><script type="math/tex; mode=display">w_j = w_j - \eta \sum_{i=1}^{n}{ ( \hat{ y_{ij}} -y_{ij}) x_i }</script><p>同理,b的更新公式如下：</p><script type="math/tex; mode=display">b_j = b_j - \eta \sum_{i=1}^{n}{ ( \hat{ y_{ij}} -y_{ij}) }</script><p>上面的公式可以由下面的代码来验证:</p><p><img src="/images/cross_entropy/code.png" alt title="code"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      
      
      
        <tags>
            
            <tag> deep learning </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
